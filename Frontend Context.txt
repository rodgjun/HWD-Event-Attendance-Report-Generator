Frontend Context

Attendance.tsx
`
import { useEffect, useRef, useState } from 'react';
import { motion } from 'framer-motion';
import { ChevronDownIcon, ChevronUpIcon, PlusIcon, PencilIcon, TrashIcon, XMarkIcon, PlayIcon } from '@heroicons/react/24/outline';
import { Toaster, toast } from 'react-hot-toast';
import { api } from '../services/api';
import { SearchInput } from '../components/SearchInput';
import { EventFilterDropdown } from '../components/EventFilterDropdown';
import { UploadResultModal } from '../components/UploadResultModal';
import { TableContainer } from '../components/TableContainer';
import { Pagination } from '../components/Pagination';
import { FileActionsBar } from '../components/FileActionsBar';
import { useNavigate } from 'react-router-dom';

type AttendanceRow = {
  attendance_id: number;
  employee_no: string | null;
  employee_name: string;
  department: string | null;
  mode_of_attendance: 'Virtual' | 'Onsite';
  validation_status: 'Registered' | 'Not Registered';
  event: { event_id: number; event_name: string };
};

type PaginationData = {
  total: number;
  page: number;
  limit: number;
  totalPages: number;
};

type UploadResult = { inserted: number; skipped?: number; skip_details?: any[] };
type DepartmentOption = string;

export function Attendance() {
  const navigate = useNavigate();
  const [rows, setRows] = useState<AttendanceRow[]>([]);
  const [pagination, setPagination] = useState<PaginationData>({ total: 0, page: 1, limit: 10, totalPages: 0 });
  const [search, setSearch] = useState('');
  const [selectedEventId, setSelectedEventId] = useState<number>(0);
  const [selectedEventName, setSelectedEventName] =useState('');
  const [sorting, setSorting] = useState({ sort: 'attendance_id', order: 'DESC' as 'ASC' | 'DESC' });
  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());
  const [editingRegId, setEditingRegId] = useState<number | null>(null);
  const [form, setForm] = useState({
    employee_no: '',
    employee_name: '',
    department: '',
    mode_of_attendance: 'Onsite' as 'Virtual' | 'Onsite',
    event_id: 0
  });
  const [departments, setDepartments] = useState<DepartmentOption[]>([]);
  const [tableLoading, setTableLoading] = useState(false);
  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);
  const [showUploadModal, setShowUploadModal] = useState(false);
  const inputRefs = useRef<{ [key: string]: HTMLInputElement | null }>({});

  const exportParams = {
    ...(search && { search }),
    ...(selectedEventId > 0 && { event_id: selectedEventId.toString() })
  };

  const ChevronIcon = ({ field }: { field: string }) => 
    sorting.sort === field ? (sorting.order === 'ASC' ? <ChevronUpIcon className="w-4 h-4" /> : <ChevronDownIcon className="w-4 h-4" />) : null;

  // Load departments once
  useEffect(() => {
    loadDepartments();
  }, []);

  async function loadDepartments() {
    try {
      const res = await api.get('/employees/departments');
      setDepartments(res.data);
    } catch (e: any) {
      toast.error('Failed to load departments');
    }
  }

  // Load attendance data
  useEffect(() => {
    
    load();
  }, [pagination.page, pagination.limit, sorting, selectedEventId, search]);

  const load = async () => {
      setTableLoading(true);
      try {
        const params = new URLSearchParams({
          page: pagination.page.toString(),
          limit: pagination.limit.toString(),
          sort: sorting.sort,
          order: sorting.order,
          ...(selectedEventId && { event_id: selectedEventId.toString() }),
          ...(search && { search })
        });

        const res = await api.get(`/attendance?${params}`);
        setRows(res.data.attendance);
        setPagination(res.data.pagination);
      } catch (e: any) {
        toast.error(e.response?.data?.error || 'Failed to load attendance');
      } finally {
        setTableLoading(false);
      }
    };

  // Handle form submission
  const handleAddOrUpdate = async (id?: number) => {
    if (!form.employee_name.trim()) {
      toast.error('Employee Name is required');
      return;
    }
    if (!form.event_id) {
      toast.error('Event is required');
      return;
    }

    const payload = {
      employee_no: form.employee_no.trim() || null,
      employee_name: form.employee_name.trim(),
      department: form.department.trim() || null,
      mode_of_attendance: form.mode_of_attendance,
      event_id: form.event_id
    };

    try {
      if (id) {
        await api.put(`/attendance/${id}`, payload);
        toast.success('Attendance updated');
      } else {
        await api.post('/attendance', payload);
        toast.success('Attendance added');
      }
      resetForm();
      setSelectedRows(new Set());
    } catch (e: any) {
      toast.error(e.response?.data?.details || e.response?.data?.error || 'Operation failed');
    }
  };

  const resetForm = () => {
    setEditingRegId(null);
    setForm({
      employee_no: '',
      employee_name: '',
      department: '',
      mode_of_attendance: 'Onsite',
      event_id: selectedEventId || 0
    });
  };

  const startEdit = (row: AttendanceRow) => {
    setEditingRegId(row.attendance_id);
    setForm({
      employee_no: row.employee_no || '',
      employee_name: row.employee_name,
      department: row.department || '',
      mode_of_attendance: row.mode_of_attendance,
      event_id: row.event.event_id
    });
    inputRefs.current['employee_no']?.focus();
  };

  const cancelEdit = () => {
    resetForm();
  };

  const deleteRegistration = async (id: number) => {
    if (!confirm('Delete this attendance record?')) return;
    try {
      await api.delete(`/attendance/${id}`);
      toast.success('Deleted');
    } catch (e: any) {
      toast.error(e.response?.data?.error || 'Delete failed');
    }
  };

  const handleBulkDelete = async () => {
  if (!confirm(`Delete ${selectedRows.size} selected records?`)) return;

  try {
    await api.post('/attendance/bulk-delete', { ids: Array.from(selectedRows) });
    toast.success('Bulk delete successful');
    setSelectedRows(new Set());
    // --- REFRESH DATA ---
    await load(); // reuse existing load logic
  } catch (e: any) {
    toast.error(e.response?.data?.error || 'Bulk delete failed');
  }
};

  const handleUploadComplete = (result: UploadResult) => {
    setUploadResult(result);
    setShowUploadModal(true);
  };

  // Employee lookup
  async function handleEmployeeNoChange(e: React.ChangeEvent<HTMLInputElement>) {
    const no = e.target.value.trim();
    setForm({ ...form, employee_no: no });
    if (no && no !== 'NA') {
      try {
        const res = await api.get(`/employees/by-number/${no}`);
        setForm(prev => ({ ...prev, employee_name: res.data.employee_name || '', department: res.data.department || '' }));
      } catch (e: any) {
        if (e.response?.status === 404) {
          setForm(prev => ({ ...prev, employee_name: '', department: '' }));
        } else {
          toast.error('Lookup failed');
        }
      }
    } else {
      setForm(prev => ({ ...prev, employee_name: '', department: '' }));
    }
  }

  // const ChevronIcon = ({ field }: { field: string }) => {
  //   if (sorting.sort !== field) return null;
  //   return sorting.order === 'ASC' ? (
  //     <span className="ml-1 inline-block">↑</span>
  //   ) : (
  //     <span className="ml-1 inline-block">↓</span>
  //   );
  // };

  const handleKioskLaunch = () => {
    navigate('/kiosk');
  };

  return (
    <div className="space-y-6">
      <Toaster position="top-right" />

      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h1 className="text-2xl font-bold text-gray-900">Attendance</h1>
        <div className="flex items-center gap-3">
          <SearchInput value={search} onChange={setSearch} placeholder="Search name or employee no..." />
          {/* Kiosk Mode Button - Placeholder (will move beside search later) */}
          <motion.button
          whileHover={{ scale: 1.02 }}
          onClick={handleKioskLaunch}
          className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors text-sm font-medium"
        >
          <PlayIcon className="w-4 h-4" />
            Kiosk Mode
        </motion.button>
        </div>
      </div>

      {/* File Actions */}
      <FileActionsBar
        uploadEndpoint="/attendance/upload"
        exportEndpoint="/attendance/export"
        templateEndpoint="/attendance/template"
        exportParams={exportParams}
        uploadLabel="Upload Registrations"
        onUploadComplete={load}
      />

      {/* Filters & Bulk Actions */}
      

      {/* Table */}
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden"
      >
        {/* Event Filter + Bulk Delete */}
        <div className="p-4 border-b bg-gray-50 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <label className="text-sm font-medium text-gray-700">Event:</label>
            <EventFilterDropdown selectedEventId={selectedEventId} onChange={setSelectedEventId} />
          </div>

        {selectedRows.size > 0 && (
          <button
            onClick={handleBulkDelete}
            className="flex items-center gap-1.5 px-3 py-1.5 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors shadow-sm"
            aria-label={`Delete ${selectedRows.size} selected records`}
          >
            <TrashIcon className="w-4 h-4" />
            Delete ({selectedRows.size})
          </button>
        )}
      </div>
        <div className="w-full overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 w-10">
                  <input
                    type="checkbox"
                    checked={selectedRows.size === rows.length && rows.length > 0}
                    onChange={(e) => {
                      setSelectedRows(e.target.checked ? new Set(rows.map(r => r.attendance_id)) : new Set());
                    }}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                  onClick={() => setSorting(prev => ({
                    sort: 'attendance_id',
                    order: prev.sort === 'attendance_id' && prev.order === 'ASC' ? 'DESC' : 'ASC'
                  }))}
                >
                  ID <ChevronIcon field="attendance_id" />
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                  onClick={() => setSorting(prev => ({
                    sort: 'employee_no',
                    order: prev.sort === 'employee_no' && prev.order === 'ASC' ? 'DESC' : 'ASC'
                  }))}
                >
                  Employee No <ChevronIcon field="employee_no" />
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                  onClick={() => setSorting(prev => ({
                    sort: 'employee_name',
                    order: prev.sort === 'employee_name' && prev.order === 'ASC' ? 'DESC' : 'ASC'
                  }))}
                >
                  Employee Name <ChevronIcon field="employee_name" />
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                  onClick={() => setSorting(prev => ({
                    sort: 'department',
                    order: prev.sort === 'department' && prev.order === 'ASC' ? 'DESC' : 'ASC'
                  }))}
                >
                  Department <ChevronIcon field="department" />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mode</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              <TableContainer
                loading={tableLoading}
                data={rows}
                emptyMessage={selectedEventId ? `No attendance for "${selectedEventName}".` : 'No attendance records.'}
                modulename='attendance'
              >
                {/* Add/Edit Row */}
                <tr className={editingRegId ? 'bg-yellow-50' : 'bg-gray-50'}>
                  <td className="px-6 py-4"></td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {editingRegId ? `Edit ${editingRegId}` : 'New'}
                  </td>
                  <td className="px-6 py-4">
                    <input
                      ref={el => inputRefs.current['employee_no'] = el}
                      type="text"
                      value={form.employee_no}
                      onChange={handleEmployeeNoChange}
                      className="w-full p-1 border rounded text-sm"
                      placeholder="Optional"
                    />
                  </td>
                  <td className="px-6 py-4">
                    <input
                      type="text"
                      value={form.employee_name}
                      onChange={e => setForm({ ...form, employee_name: e.target.value })}
                      className="w-full p-1 border rounded text-sm"
                      placeholder="Required"
                    />
                  </td>
                  <td className="px-6 py-4">
                    <input
                      list="departments"
                      value={form.department}
                      onChange={e => setForm({ ...form, department: e.target.value })}
                      className="w-full p-1 border rounded text-sm"
                    />
                    <datalist id="departments">
                      {departments.map(d => <option key={d} value={d} />)}
                    </datalist>
                  </td>
                  <td className="px-6 py-4">
                    <select
                      value={form.mode_of_attendance}
                      onChange={e => setForm({ ...form, mode_of_attendance: e.target.value as 'Virtual' | 'Onsite' })}
                      className="w-full p-1 border rounded text-sm"
                    >
                      <option value="Onsite">Onsite</option>
                      <option value="Virtual">Virtual</option>
                    </select>
                  </td>
                  <td className="px-6 py-4 text-xs text-gray-500">—</td>
                  <td className="px-6 py-4">
                    <button
                      onClick={() => handleAddOrUpdate(editingRegId || undefined)}
                      disabled={tableLoading || !form.employee_name || !form.event_id}
                      className="text-green-600 mr-2 disabled:opacity-50"
                    >
                      {editingRegId ? <PencilIcon className="w-4 h-4" /> : <PlusIcon className="w-4 h-4" />}
                    </button>
                    <button onClick={cancelEdit} className="text-gray-400">
                      <XMarkIcon className="w-4 h-4" />
                    </button>
                  </td>
                </tr>

                {/* Data Rows */}
                {rows.map(row => (
                  <tr key={row.attendance_id}>
                    <td className="px-6 py-4">
                      <input
                        type="checkbox"
                        checked={selectedRows.has(row.attendance_id)}
                        onChange={(e) => {
                          const newSet = new Set(selectedRows);
                          e.target.checked ? newSet.add(row.attendance_id) : newSet.delete(row.attendance_id);
                          setSelectedRows(newSet);
                        }}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.attendance_id}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.employee_no || 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.employee_name}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.department || 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        row.mode_of_attendance === 'Onsite' ? 'bg-green-100 text-green-800' : 'bg-purple-100 text-purple-800'
                      }`}>
                        {row.mode_of_attendance}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        row.validation_status === 'Registered' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {row.validation_status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button onClick={() => startEdit(row)} className="text-blue-600 mr-2">
                        <PencilIcon className="w-4 h-4" />
                      </button>
                      <button onClick={() => deleteRegistration(row.attendance_id)} className="text-red-600">
                        <TrashIcon className="w-4 h-4" />
                      </button>
                    </td>
                  </tr>
                ))}
              </TableContainer>
            </tbody>
          </table>
        </div>
      </motion.div>

      {/* Pagination */}
      <div className="flex justify-between items-center mt-6">
        <div className="text-sm text-gray-700">
          Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total}
        </div>
        <Pagination
          page={pagination.page}
          totalPages={pagination.totalPages}
          onPageChange={p => setPagination({ ...pagination, page: p })}
          disabled={tableLoading}
        />
      </div>

      {/* Upload Result Modal */}
      <UploadResultModal
        result={uploadResult}
        isOpen={showUploadModal}
        onClose={() => setShowUploadModal(false)} 
      />
    </div>
  );
}`

Landing.tsx
`
import { Link, useNavigate } from 'react-router-dom';
import { useEffect, useState, useMemo, useRef } from 'react';
import { motion, useInView, MotionProps } from 'framer-motion';
import {
  LockClosedIcon,
  ClipboardDocumentCheckIcon,
  ChartBarIcon,
  ArrowRightIcon,
  ArrowDownTrayIcon as DownloadIcon,
} from '@heroicons/react/24/outline';

export function Landing() {
  const navigate = useNavigate();
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('token');
    setIsAuthenticated(!!token);
  }, []);

  const handleGetStarted = () => {
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }
    navigate('/registrations');
  };

  const handleViewReports = () => {
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }
    navigate('/reports');
  };

  // Memoized variants for stability on re-renders
  const fadeInUp: MotionProps['variants'] = useMemo(
    () => ({
      hidden: { opacity: 0, y: 30 },
      visible: { 
        opacity: 1, 
        y: 0, 
        transition: { duration: 0.6, ease: 'easeOut' } 
      },
    }),
    []
  );

  // Refs for in-view detection
  const heroRef = useRef(null);
  const guideRef = useRef(null);
  const templateRef = useRef(null);
  const inViewHero = useInView(heroRef, { once: true, margin: '-100px' });
  const inViewGuide = useInView(guideRef, { once: true, margin: '-100px' });
  const inViewTemplate = useInView(templateRef, { once: true, margin: '-100px' });

  const handleDownload = (filename: string) => {
    const link = document.createElement('a');
    link.href = `/${filename}`;
    link.download = filename;
    link.click();
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      {/* Hero Section */}
      <motion.section
      ref={heroRef}
      initial="hidden"
      animate={inViewHero ? 'visible' : 'hidden'}
      variants={fadeInUp}
      className="min-h-[80vh] flex flex-col justify-center items-center px-4 text-center bg-gradient-to-r from-blue-600 via-blue-700 to-indigo-600 rounded-b-3xl"
    >
      <div className="max-w-4xl mx-auto space-y-6">
        <h1 className="text-4xl md:text-5xl font-bold text-white leading-tight">
          Streamline Health & Wellness
          <br />
          Event Management
        </h1>
        <p className="text-lg md:text-xl text-blue-100 max-w-2xl mx-auto leading-relaxed">
          Effortlessly track attendance, validate registrations, and generate insightful reports for BSP's wellness programs.
        </p>

        {/* Image stays in the same position */}
        <div className="mt-6 mb-6">
          <img
            src="/health-landing.jpg"
            alt="Wellness tracking illustration"
            className="w-[400px] h-[200px] mx-auto rounded-2xl shadow-lg object-cover"
          />
        </div>

        <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
          <button
            onClick={handleGetStarted}
            className="bg-white text-blue-700 px-8 py-3 text-lg font-semibold rounded-full shadow-md hover:shadow-lg transform hover:scale-105 transition-all duration-300 flex items-center gap-2"
            aria-label="Get started with registrations"
          >
            Get Started
            <ArrowRightIcon className="w-5 h-5" />
          </button>
          <button
            onClick={handleViewReports}
            className="border-2 border-white text-white px-8 py-3 text-lg font-semibold rounded-full hover:bg-white/20 transition-all duration-300 flex items-center gap-2"
            aria-label="View reports"
          >
            View Reports
            <ChartBarIcon className="w-5 h-5" />
          </button>
        </div>
      </div>
    </motion.section>


      {/* User Guide Section */}
      <motion.section
        ref={guideRef}
        initial="hidden"
        animate={inViewGuide ? 'visible' : 'hidden'}
        variants={fadeInUp}
        className="max-w-6xl mx-auto py-20"
      >
        <h2 className="text-4xl font-bold text-center text-gray-900 mb-16">How to Use the System</h2>
        <div className="grid md:grid-cols-3 gap-8">
          {[
            {
              icon: LockClosedIcon,
              number: '1',
              title: 'Login as Admin',
              desc: 'Access the dashboard with your credentials to manage events and users.',
            },
            {
              icon: ClipboardDocumentCheckIcon,
              number: '2',
              title: 'Register & Track Attendance',
              desc: 'Upload Excel files or add manual entries for seamless validation.',
            },
            {
              icon: ChartBarIcon,
              number: '3',
              title: 'Generate Reports',
              desc: 'View analytics on participation, departments, and more—export anytime.',
            },
          ].map((step, index) => (
            <motion.div
              key={index}
              whileHover={{ scale: 1.02, backgroundColor: '#dbeafe' }}
              className="bg-white p-8 rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 text-center"
            >
              <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center mb-6 mx-auto">
                <step.icon className="w-8 h-8 text-white" />
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4 mx-auto text-blue-600 font-bold text-xl">
                {step.number}
              </div>
              <h3 className="text-2xl font-bold text-gray-900 mb-3">{step.title}</h3>
              <p className="text-gray-600">{step.desc}</p>
            </motion.div>
          ))}
        </div>
      </motion.section>

      {/* Excel Templates Guide Section */}
      <motion.section
        ref={templateRef}
        initial="hidden"
        animate={inViewTemplate ? 'visible' : 'hidden'}
        variants={fadeInUp}
        className="max-w-6xl mx-auto py-20"
      >
        <h2 className="text-4xl font-bold text-center text-gray-900 mb-8">Excel Templates Guide</h2>
        <p className="text-center text-gray-600 mb-16 max-w-2xl mx-auto">
          Use these CSV/Excel formats for bulk uploads. Event Name is used for matching events.
        </p>
        <div className="grid md:grid-cols-3 gap-8">
          {[
            {
              title: 'Events.csv',
              desc: 'Define new events with type, name, and date.',
              headers: ['Event Type', 'Event Name', 'Event Date'],
              sample: ['Wellness Session', 'Yoga Workshop', '2025-10-25'],
              filename: 'events-template.csv',
            },
            {
              title: 'Registrations.csv',
              desc: 'Register participants by employee details and event.',
              headers: ['Employee No', 'Employee Name', 'Department', 'Event Name'],
              sample: ['EMP001', 'John Doe', 'HR', 'Yoga Workshop'],
              filename: 'registrations-template.csv',
            },
            {
              title: 'Attendance.csv',
              desc: 'Record attendance with mode and event details.',
              headers: ['Employee No', 'Employee Name', 'Department', 'Mode', 'Event Name'],
              sample: ['EMP001', 'John Doe', 'HR', 'Onsite', 'Yoga Workshop'],
              filename: 'attendance-template.csv',
            },
          ].map((template, index) => (
            <div key={index} className="bg-white p-6 rounded-2xl shadow-md">
              <h3 className="text-xl font-semibold mb-3 text-blue-600 flex items-center justify-between">
                {template.title}
                <button
                  onClick={() => handleDownload(template.filename)}
                  className="flex items-center gap-1 text-sm text-blue-600 hover:text-blue-700 transition-colors"
                  aria-label={`Download ${template.title}`}
                >
                  Download <DownloadIcon className="w-4 h-4" />
                </button>
              </h3>
              <p className="text-sm text-gray-600 mb-4">{template.desc}</p>
              <div className="overflow-x-auto">
                <table className="w-full text-sm text-gray-700">
                  <thead className="bg-blue-50">
                    <tr>
                      {template.headers.map((header, hIndex) => (
                        <th key={hIndex} className="px-3 py-2 text-left font-medium text-blue-700">
                          {header}
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="border-t bg-gray-50">
                      {template.sample.map((cell, cIndex) => (
                        <td key={cIndex} className="px-3 py-2">
                          {cell}
                        </td>
                      ))}
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          ))}
        </div>
      </motion.section>
    </div>
  );
}


`

Login.tsx
`
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { api } from '../services/api';

export function Login() {
  const navigate = useNavigate();
  const [form, setForm] = useState({ username: '', password: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      const res = await api.post('/auth/login', form);
      localStorage.setItem('token', res.data.token);
      navigate('/');
    } catch (e: any) {
      setError(e.response?.data?.error || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-[80vh]   bg-gray-50 flex items-center justify-center py-8 px-4 overflow-hidden">
      <div className="max-w-md w-full space-y-6 bg-white p-6 rounded-xl shadow-lg">
        {/* Logo */}
        <div className="text-center mb-4">
          <img 
            src="/hwd_logo_2.png" 
            alt="HWD Logo" 
            className="mx-auto h-16 w-auto md:h-20" 
          />
        </div>

        
        <div className="text-center">
          <h2 className="text-3xl font-bold text-gray-900">Welcome Back</h2>
          <p className="mt-2 text-sm text-gray-600">Sign in to your HWD admin account</p>
        </div>
        <form onSubmit={handleSubmit} className="space-y-4">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm transition-all">
              {error}
            </div>
          )}
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-2">
              Username
            </label>
            <input
              id="username"
              type="text"
              required
              autoFocus
              value={form.username}
              onChange={(e) => setForm({ ...form, username: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              aria-describedby="username-error"
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
              Password
            </label>
            <input
              id="password"
              type="password"
              required
              value={form.password}
              onChange={(e) => setForm({ ...form, password: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              aria-describedby="password-error"
            />
          </div>
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md font-semibold hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 transition-colors"
            aria-label="Sign in"
          >
            {loading ? 'Signing In...' : 'Sign In'}
          </button>
        </form>
        <div className="text-center">
          <button
            onClick={() => navigate('/')}
            className="text-sm text-blue-600 hover:text-blue-500 transition-colors"
          >
            ← Back to Home
          </button>
        </div>
      </div>
    </div>
  );
}
`

NotFound.tsx
`
export function NotFound() {
  return <div className="text-center text-gray-600 mt-10">Page not found.</div>;
}



`

Registrations.tsx
`
import { useEffect, useState, useRef, useCallback } from 'react';
import { api } from '../services/api';
import { Toaster, toast } from 'react-hot-toast';
import { motion } from 'framer-motion';
import { 
  ChevronDownIcon, 
  ChevronUpIcon, 
  PencilIcon, 
  TrashIcon, 
  PlusIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';

import { SearchInput } from '../components/SearchInput';
import { EventFilterDropdown } from '../components/EventFilterDropdown';
import { UploadResultModal } from '../components/UploadResultModal';
import { TableContainer } from '../components/TableContainer';
import { Pagination } from '../components/Pagination';
import { FileActionsBar } from '../components/FileActionsBar';

type RegistrationRow = { 
  reg_id: number; 
  employee_no: string | null; 
  employee_name: string; 
  department: string | null; 
  event_id: number; 
  event?: { event_name: string };
};

type FormData = {
  employee_no: string;
  employee_name: string;
  department: string;
  event_id: number;
};

type UploadResult = { inserted: number; skipped?: number; skip_details?: any[] };

export function Registrations() {
  const [rows, setRows] = useState<RegistrationRow[]>([]);
  const [departments, setDepartments] = useState<string[]>([]);
  const [form, setForm] = useState<FormData>({ employee_no: '', employee_name: '', department: '', event_id: 0 });
  const [editingRegId, setEditingRegId] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);
  const [selectedEventId, setSelectedEventId] = useState<number>(0);
  const [selectedEventName, setSelectedEventName] = useState<string>('');
  const [tableLoading, setTableLoading] = useState(false);
  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);
  const [showUploadModal, setShowUploadModal] = useState(false);

  const [pagination, setPagination] = useState({ total: 0, page: 1, limit: 10, totalPages: 0 });
  const [search, setSearch] = useState('');
  const [sorting, setSorting] = useState({ sort: 'reg_id', order: 'DESC' as 'ASC' | 'DESC' });

  const inputRefs = useRef<{ [key: string]: HTMLInputElement | null }>({});

  const exportParams = {
  ...(search && { search }),
  ...(selectedEventId > 0 && { event_id: selectedEventId.toString() })
};

  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());

  // Add events state and fetch events
  const [events, setEvents] = useState<{ event_id: number; event_name: string }[]>([]);

  useEffect(() => {
    api.get('/events/all')
      .then(res => setEvents(res.data.events || []))
      .catch(() => toast.error('Failed to load events'))
      .finally(() => setLoading(false));
  }, []);

  // Sync event name from dropdown
  useEffect(() => {
    const event = events.find(e => e.event_id === selectedEventId);
    setForm(prev => ({ ...prev, event_id: selectedEventId }));
    setSelectedEventName(event?.event_name || ''); // Always set
  }, [selectedEventId, events]);

  useEffect(() => {
    setPagination(prev => ({ ...prev, page: 1 }));
  }, [selectedEventId, search]);

  useEffect(() => {
    api.get('/registrations/departments')
      .then(res => setDepartments(res.data))
      .catch(() => toast.error('Failed to load departments'));
  }, []);

  const load = useCallback(async () => {
    setTableLoading(true);
    try {
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
        sort: sorting.sort,
        order: sorting.order,
        ...(search && { search }),
        ...(selectedEventId > 0 && { event_id: selectedEventId.toString() })
      });
      const res = await api.get(`/registrations?${params}`);
      setRows(res.data.registrations);
      setPagination(res.data.pagination);
    } catch {
      toast.error('Failed to load data');
    } finally {
      setTableLoading(false);
    }
  }, [pagination.page, pagination.limit, sorting, search, selectedEventId]);

  useEffect(() => { load(); }, [load]);

  // Upload handler
  const handleUpload = async (file: File) => {
    const formData = new FormData();
    formData.append('file', file);
    try {
      const res = await api.post('/registrations/upload', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      setUploadResult(res.data);
      setShowUploadModal(true);
      await load();
    } catch {
      toast.error('Upload failed');
    }
  };

  // Employee lookup
  async function handleEmployeeNoChange(e: React.ChangeEvent<HTMLInputElement>) {
    const no = e.target.value.trim();
    setForm({ ...form, employee_no: no });
    if (no && no !== 'NA') {
      try {
        const res = await api.get(`/employees/by-number/${no}`);
        setForm(prev => ({ ...prev, employee_name: res.data.employee_name || '', department: res.data.department || '' }));
      } catch (e: any) {
        if (e.response?.status === 404) {
          setForm(prev => ({ ...prev, employee_name: '', department: '' }));
        } else {
          toast.error('Lookup failed');
        }
      }
    } else {
      setForm(prev => ({ ...prev, employee_name: '', department: '' }));
    }
  }

  const handleAddOrUpdate = useCallback(async (regId?: number) => {
      if (selectedEventId === 0) {
      toast.error('Please select an event before adding/updating a registration.');
      return;
    }
    if (!form.employee_name.trim()) {
      toast.error('Employee Name is required');
      return;
    }
    setLoading(true);
    try {
      const payload = { ...form, employee_no: form.employee_no || null, department: form.department || null };
      if (regId && editingRegId) {
        await api.put(`/registrations/${regId}`, payload);
        toast.success('Updated');
      } else {
        await api.post('/registrations', payload);
        toast.success('Added');
      }
      setForm({ employee_no: '', employee_name: '', department: '', event_id: selectedEventId });
      setEditingRegId(null);
      await load();
    } catch {
      toast.error('Save failed');
    } finally {
      setLoading(false);
    }
  }, [form, editingRegId, selectedEventId, load]);

  function startEdit(reg: RegistrationRow) {
    setEditingRegId(reg.reg_id);
    setForm({
      employee_no: reg.employee_no || '',
      employee_name: reg.employee_name,
      department: reg.department || '',
      event_id: reg.event_id
    });
    setTimeout(() => inputRefs.current['employee_no']?.focus(), 0);
  }

  function cancelEdit() {
    setForm({ employee_no: '', employee_name: '', department: '', event_id: selectedEventId });
    setEditingRegId(null);
  }

  async function deleteRegistration(id: number) {
    if (!confirm('Delete?')) return;
    try {
      await api.delete(`/registrations/${id}`);
      toast.success('Deleted');
      await load();
    } catch {
      toast.error('Delete failed');
    }
  }

  const ChevronIcon = ({ field }: { field: string }) => 
    sorting.sort === field ? (sorting.order === 'ASC' ? <ChevronUpIcon className="w-4 h-4" /> : <ChevronDownIcon className="w-4 h-4" />) : null;

  // === Bulk Delete Handler ===
const handleBulkDelete = async () => {
  if (selectedRows.size === 0) return;
  if (!confirm(`Delete ${selectedRows.size} record(s)?`)) return;

  try {
    await api.post('/registrations/bulk-delete', { ids: Array.from(selectedRows) });
    toast.success('Deleted successfully');
    setSelectedRows(new Set());
    await load();
  } catch {
    toast.error('Bulk delete failed');
  }
};

  return (
    <div className="space-y-6">
      <Toaster />
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Registrations</h1>
        <div className="flex items-center gap-3">
          <SearchInput value={search} onChange={setSearch} placeholder="Search name or employee no..." />
          
        </div>
      </div>
        <FileActionsBar
            uploadEndpoint="/registrations/upload"
            exportEndpoint="/registrations/export"
            templateEndpoint="/registrations/template"
            exportParams={exportParams}
            uploadLabel="Upload Registrations"
            onUploadComplete={load}
          />

      <motion.div className="bg-white rounded-lg shadow-sm border overflow-hidden">
        {/* Event Filter + Bulk Delete */}
        <div className="p-4 border-b bg-gray-50 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <label className="text-sm font-medium text-gray-700">Event:</label>
            <EventFilterDropdown selectedEventId={selectedEventId} onChange={setSelectedEventId} />
          </div>

          {/* Bulk Delete Button - Only if rows selected */}
          {selectedRows.size > 0 && (
            <button
              onClick={handleBulkDelete}
              className="flex items-center gap-1.5 px-3 py-1.5 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors shadow-sm"
              aria-label={`Delete ${selectedRows.size} selected records`}
            >
              <TrashIcon className="w-4 h-4" />
              Delete ({selectedRows.size})
            </button>
          )}
        </div>
        <div className="w-full overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 w-10">
                  <input
                    type="checkbox"
                    checked={selectedRows.size === rows.length && rows.length > 0}
                    onChange={(e) => {
                      setSelectedRows(e.target.checked ? new Set(rows.map(r => r.reg_id)) : new Set());
                    }}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onClick={() => setSorting(prev => ({ sort: 'reg_id', order: prev.sort === 'reg_id' && prev.order === 'ASC' ? 'DESC' : 'ASC' }))}>
                  ID <ChevronIcon field="reg_id" />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onClick={() => setSorting(prev => ({ sort: 'employee_no', order: prev.sort === 'employee_no' && prev.order === 'ASC' ? 'DESC' : 'ASC' }))}>
                  Employee No <ChevronIcon field="employee_no" />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onClick={() => setSorting(prev => ({ sort: 'employee_name', order: prev.sort === 'employee_name' && prev.order === 'ASC' ? 'DESC' : 'ASC' }))}>
                  Employee Name <ChevronIcon field="employee_name" />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onClick={() => setSorting(prev => ({ sort: 'department', order: prev.sort === 'department' && prev.order === 'ASC' ? 'DESC' : 'ASC' }))}>
                  Department <ChevronIcon field="department" />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              <TableContainer loading={tableLoading} data={rows} emptyMessage={selectedEventId > 0 ? `No registrations for "${selectedEventName}".` : 'No registrations.'} modulename="registrations">
                {/* Add/Edit Row */}
                <tr className={editingRegId ? 'bg-yellow-50' : 'bg-gray-50'}>
                  <td className="px-6 py-4"></td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{editingRegId ? `Edit ${editingRegId}` : 'New'}</td>
                  <td className="px-6 py-4"><input ref={el => inputRefs.current['employee_no'] = el} type="text" value={form.employee_no} onChange={handleEmployeeNoChange} className="w-full p-1 border rounded" /></td>
                  <td className="px-6 py-4"><input type="text" value={form.employee_name} onChange={e => setForm({ ...form, employee_name: e.target.value })} className="w-full p-1 border rounded" placeholder="Required" /></td>
                  <td className="px-6 py-4">
                    <input list="departments" value={form.department} onChange={e => setForm({ ...form, department: e.target.value })} className="w-full p-1 border rounded" />
                    <datalist id="departments">{departments.map(d => <option key={d} value={d} />)}</datalist>
                  </td>
                  <td className="px-6 py-4">
                    <button onClick={() => handleAddOrUpdate(editingRegId || undefined)} disabled={loading || !form.employee_name || !form.event_id} className="text-green-600 mr-2">
                      {editingRegId ? <PencilIcon className="w-4 h-4" /> : <PlusIcon className="w-4 h-4" />}
                    </button>
                    <button onClick={cancelEdit} className="text-gray-400"><XMarkIcon className="w-4 h-4" /></button>
                  </td>
                </tr>

                {rows.map(row => (
                  <tr key={row.reg_id}>
                    <td className="px-6 py-4">
                      <input
                        type="checkbox"
                        checked={selectedRows.has(row.reg_id)}
                        onChange={(e) => {
                          const newSet = new Set(selectedRows);
                          e.target.checked ? newSet.add(row.reg_id) : newSet.delete(row.reg_id);
                          setSelectedRows(newSet);
                        }}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.reg_id}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.employee_no || 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.employee_name}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.department || 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button onClick={() => startEdit(row)} className="text-blue-600 mr-2"><PencilIcon className="w-4 h-4" /></button>
                      <button onClick={() => deleteRegistration(row.reg_id)} className="text-red-600"><TrashIcon className="w-4 h-4" /></button>
                    </td>
                  </tr>
                ))}
              </TableContainer>
            </tbody>
          </table>
        </div>
      </motion.div>

      <div className="flex justify-between items-center mt-6">
        <div className="text-sm text-gray-700">
          Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total}
        </div>
        <Pagination page={pagination.page} totalPages={pagination.totalPages} onPageChange={p => setPagination({ ...pagination, page: p })} disabled={tableLoading} />
      </div>

      <UploadResultModal 
        result={uploadResult} 
        isOpen={showUploadModal} 
        onClose={() => setShowUploadModal(false)} 
      />
    </div>
  );
}`

Reports.tsx
`

`

AppLayout.tsx
`
import { Link, Outlet, useLocation, useNavigate } from 'react-router-dom';
import { useState } from 'react';
import { Toaster } from 'react-hot-toast';

export function AppLayout() {
  const { pathname } = useLocation();
  const navigate = useNavigate();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const isAuthenticated = !!localStorage.getItem('token'); // Compute directly for real-time updates

  // In AppLayout component, wrap navbar in conditional
  const isKiosk = pathname === '/kiosk';

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  const NavLink = ({ to, label, onClick }: { to: string; label: string; onClick?: () => void }) => (
    <Link
      to={to}
      onClick={onClick}
      className={`block px-4 py-2 rounded-md text-sm font-medium transition-colors ${
        pathname === to
          ? 'bg-blue-600 text-white'
          : 'text-gray-700 hover:bg-blue-100 hover:text-blue-700'
      }`}
      aria-current={pathname === to ? 'page' : undefined}
    >
      {label}
    </Link>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {!isKiosk && (
      <nav className="bg-white shadow-sm border-b border-gray-200 fixed w-full z-50">
        <div className="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            {/* Logo/Brand */}
            <div className="flex items-center">
              <Link to="/">
                <img src="/hwd_logo_2.png" alt="HWD Logo" className="h-8 w-auto" />
              </Link>
              <Link 
              to="/" 
              className="pl-2 text-l font-[Poppins] font-semibold text-blue-600 hover:text-blue-700 transition-colors duration-200"
            > 
              HWD 
            </Link>


            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-1">
              <NavLink to="/" label="Home" />
              <NavLink to="/events" label="Events" />
              <NavLink to="/registrations" label="Registrations" />
              <NavLink to="/attendance" label="Attendance" />
              <NavLink to="/evaluations" label="Evaluations" />
              <NavLink to="/reports" label="Reports" />
            </div>

            {/* Auth Button */}
            <div className="hidden md:flex items-center space-x-2">
              {isAuthenticated ? (
                <button
                  onClick={handleLogout}
                  className="px-4 py-2 text-sm font-medium text-red-600 hover:bg-red-50 rounded-md transition-colors"
                  aria-label="Logout"
                >
                  Logout
                </button>
              ) : (
                <Link
                  to="/login"
                  className="px-4 py-2 text-sm font-medium text-blue-600 hover:bg-blue-50 rounded-md transition-colors"
                >
                  Login
                </Link>
              )}
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden">
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="text-gray-700 hover:text-blue-600 p-2"
                aria-label="Toggle menu"
                aria-expanded={mobileMenuOpen}
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d={mobileMenuOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'}
                  />
                </svg>
              </button>
            </div>
          </div>

          {/* Mobile Navigation */}
          {mobileMenuOpen && (
            <div className="md:hidden pb-4 space-y-1">
              <NavLink to="/" label="Home" onClick={() => setMobileMenuOpen(false)} />
              <NavLink to="/events" label="Events" onClick={() => setMobileMenuOpen(false)} />
              <NavLink to="/registrations" label="Registrations" onClick={() => setMobileMenuOpen(false)} />
              <NavLink to="/attendance" label="Attendance" onClick={() => setMobileMenuOpen(false)} />
              <NavLink to="/evaluations" label="Evaluation" onClick={() => setMobileMenuOpen(false)} />
              <NavLink to="/reports" label="Reports" onClick={() => setMobileMenuOpen(false)} />
              {isAuthenticated ? (
                <button
                  onClick={handleLogout}
                  className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                >
                  Logout
                </button>
              ) : (
                <Link
                  to="/login"
                  className="block w-full text-left px-4 py-2 text-sm text-blue-600 hover:bg-blue-50"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  Login
                </Link>
              )}
            </div>
          )}
        </div>
      </nav>
      )}
    <main className={`mx-auto max-w-6xl p-4 ${isKiosk ? 'pt-0' : 'pt-20'}`}>
      <Outlet />
    </main>
     {/* Only show Toaster when kiosk is active */}
    {isKiosk && (
      <Toaster position="top-right" containerStyle={{ zIndex: 9999 }} />
    )}
    </div>
  );
}`

main.tsx
`
import React from 'react';
import ReactDOM from 'react-dom/client';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import './index.css';
import { AppLayout } from './ui/AppLayout';
import { Landing } from './pages/Landing';
import { Events } from './pages/Events';
import { Registrations } from './pages/Registrations';
import { Attendance } from './pages/Attendance';
import { Reports } from './pages/Reports';
import { Login } from './pages/Login';
import { Kiosk } from './pages/Kiosk';
import { Evaluations } from './pages/Evaluations';

const router = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
    children: [
      { index: true, element: <Landing /> },
      { path: 'events', element: <Events /> },
      { path: 'registrations', element: <Registrations /> },
      { path: 'attendance', element: <Attendance /> },
      { path: 'evaluations', element: <Evaluations /> }, // New route
      { path: 'reports', element: <Reports /> },
      { path: 'login', element: <Login /> },
      // In createBrowserRouter children array
      { path: 'kiosk', element: <Kiosk /> },
    ],
  },
]);

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);



`

Kiosk.tsx
`
import { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { api } from '../services/api';
import { toast } from 'react-hot-toast';
import { motion, AnimatePresence } from 'framer-motion';

type EventOption = { event_id: number; event_name: string };
type DepartmentOption = string;

export function Kiosk() {
  const navigate = useNavigate();
  const location = useLocation();
  const [events, setEvents] = useState<EventOption[]>([]);
  const [departments, setDepartments] = useState<DepartmentOption[]>([]);
  const [selectedEvent, setSelectedEvent] = useState<EventOption | null>(null);
  type ModeOfAttendance = 'Onsite' | 'Virtual';
  const [form, setForm] = useState<{ employee_no: string; employee_name: string; department: string; mode_of_attendance: ModeOfAttendance }>({ employee_no: '', employee_name: '', department: '', mode_of_attendance: 'Onsite' });
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  useEffect(() => {
    loadEvents();
    loadDepartments();
    // Fullscreen on mount
    if (document.documentElement.requestFullscreen) {
      document.documentElement.requestFullscreen();
    }
    // Exit on Esc
    const handleEsc = (e: KeyboardEvent) => { if (e.key === 'Escape') exitKiosk(); };
    document.addEventListener('keydown', handleEsc);
    return () => document.removeEventListener('keydown', handleEsc);
  }, []);

  async function loadEvents() {
    try {
      const res = await api.get('/events/all');
      setEvents(res.data.events || []);
    } catch (e: any) {
      toast.error('Failed to load events');
    }
  }

  async function loadDepartments() {
    try {
      const res = await api.get('employees/departments');
      setDepartments(res.data);
    } catch (e: any) {
      toast.error('Failed to load departments');
    }
  }

  async function handleEmployeeNoChange(e: React.ChangeEvent<HTMLInputElement>) {
    const no = e.target.value.trim();
    setForm({ ...form, employee_no: no });
    if (no && no !== 'NA') {
      try {
        const res = await api.get(`/employees/by-number/${no}`);
        setForm(prev => ({ ...prev, employee_name: res.data.employee_name || '', department: res.data.department || '' }));
      } catch (e: any) {
        if (e.response?.status === 404) {
          setForm(prev => ({ ...prev, employee_name: '', department: '' }));  // Clear on not found
        } else {
          toast.error('Employee lookup failed');
        }
      }
    } else {
      setForm(prev => ({ ...prev, employee_name: '', department: '' }));  // Clear for manual/walk-in
    }
  }

  async function submit(e: React.FormEvent) {
    e.preventDefault();
    if (!form.employee_name.trim()) {
      toast.error('Name is required');
      return;
    }
    if (!selectedEvent) {
      toast.error('Select an event');
      return;
    }
    setLoading(true);
    const payload = {
      ...form,
      employee_no: form.employee_no.trim() === '' ? '' : form.employee_no.trim(),
      employee_name: form.employee_name.trim(),
      department: form.department.trim() || null,
      event_name: selectedEvent.event_name
    };
    try {
      await api.post('/attendance', payload);
      setSubmitted(true);
      toast.success(`Thank you! Your attendance for ${selectedEvent.event_name} has been recorded.`);
      setTimeout(() => {
        setForm({ employee_no: '', employee_name: '', department: '', mode_of_attendance: 'Onsite' });
        setSubmitted(false);
      }, 3000);
    } catch (e: any) {
      toast.error(e.response?.data?.error || 'Submission failed');
    } finally {
      setLoading(false);
    }
  }

  function exitKiosk() {
    if (document.exitFullscreen) document.exitFullscreen();
    navigate('/attendance');
  }

  const fadeIn = { hidden: { opacity: 0, scale: 0.95 }, visible: { opacity: 1, scale: 1, transition: { duration: 0.3 } } };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4 relative">
      {/* Exit Button */}
      <motion.button
        onClick={exitKiosk}
        className="absolute top-4 right-4 bg-red-600 text-white p-2 rounded-full shadow-lg"
        whileHover={{ scale: 1.1 }}
        aria-label="Exit Kiosk Mode"
      >
        ✕
      </motion.button>

      <AnimatePresence mode="wait">
        {!selectedEvent ? (
          <motion.div key="select" initial="hidden" animate="visible" exit="hidden" variants={fadeIn} className="text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-8">Select Event for Kiosk</h1>
            <select
              onChange={e => setSelectedEvent(events.find(ev => ev.event_name === e.target.value) || null)}
              className="border p-3 rounded-lg text-lg bg-white shadow-md"
            >
              <option value="">Choose an event...</option>
              {events.map(ev => <option key={ev.event_id} value={ev.event_name}>{ev.event_name}</option>)}
            </select>
          </motion.div>
        ) : submitted ? (
          <motion.div key="success" initial="hidden" animate="visible" exit="hidden" variants={fadeIn} className="text-center">
            <h1 className="text-4xl font-bold text-green-600 mb-4">✅ Thank You!</h1>
            <p className="text-xl text-gray-600">Your attendance for {selectedEvent.event_name} has been recorded.</p>
          </motion.div>
        ) : (
          <motion.form key="form" initial="hidden" animate="visible" exit="hidden" variants={fadeIn} onSubmit={submit} className="bg-white p-8 rounded-2xl shadow-xl max-w-md w-full space-y-6">
            <h1 className="text-2xl font-bold text-center text-gray-900">{selectedEvent.event_name} Attendance Kiosk</h1>
            <input className="w-full p-3 border rounded-lg" placeholder="Employee No (optional)" value={form.employee_no} onChange={handleEmployeeNoChange} />
            <input className="w-full p-3 border rounded-lg" placeholder="Name *" value={form.employee_name} onChange={e => setForm({ ...form, employee_name: e.target.value })} required />
            <input 
              className="w-full p-3 border rounded-lg" 
              placeholder="Department" 
              list="departments-list" 
              value={form.department} 
              onChange={e => setForm({ ...form, department: e.target.value })} 
            />
            <datalist id="departments-list">
              {departments.map(dept => <option key={dept} value={dept} />)}
            </datalist>
            <div className="flex gap-4">
              <button type="button" onClick={() => setForm({ ...form, mode_of_attendance: 'Onsite' })} className={`flex-1 p-3 rounded-lg font-semibold ${form.mode_of_attendance === 'Onsite' ? 'bg-blue-600 text-white' : 'bg-gray-100'}`}>Onsite</button>
              <button type="button" onClick={() => setForm({ ...form, mode_of_attendance: 'Virtual' })} className={`flex-1 p-3 rounded-lg font-semibold ${form.mode_of_attendance === 'Virtual' ? 'bg-blue-600 text-white' : 'bg-gray-100'}`}>Virtual</button>
            </div>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 text-white py-4 rounded-lg font-bold text-lg disabled:opacity-50"
            >
              {loading ? 'Submitting...' : 'Submit Attendance'}
            </motion.button>
          </motion.form>
        )}
      </AnimatePresence>
    </div>
  );
}`


Evaluations.tsx
`
import { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { api } from '../services/api';
import { Toaster, toast } from 'react-hot-toast';
import { 
  ChevronDownIcon, ChevronUpIcon,
  XMarkIcon, 
  MagnifyingGlassIcon, 
  PlusIcon, 
  PencilIcon, 
  TrashIcon, 
  CheckCircleIcon, 
  ExclamationTriangleIcon 
} from '@heroicons/react/24/outline';
import { SearchInput } from '../components/SearchInput';
import { EventFilterDropdown } from '../components/EventFilterDropdown';
import { UploadResultModal } from '../components/UploadResultModal';
import { TableContainer } from '../components/TableContainer';
import { Pagination } from '../components/Pagination';
import { FileActionsBar } from '../components/FileActionsBar';

type Evaluation = {
  evaluation_id: number;
  employee_no?: string;
  employee_name: string;
  event_id: number;
  event: { event_name: string };
  objectives_met?: string;
  relevance?: string;
  venue?: string;
  activity?: string;
  value_time_spent?: string;
  overall_rating?: string;
  topic_clear_effective?: string;
  answered_questions?: string;
  presentation_materials?: string;
  session_helpful?: string;
};

type PaginationType = {
  total: number;
  page: number;
  limit: number;
  totalPages: number;
};

type UploadResult = {
  inserted: number;
  skipped?: number;
  skip_details?: Array<{ reason: string; employee_name?: string; event_name?: string }>;
};

type FormData = {
  employee_no: string;
  employee_name: string;
  event_id: number;
  objectives_met: string;
  relevance: string;
  venue: string;
  activity: string;
  value_time_spent: string;
  overall_rating: string;
  topic_clear_effective: string;
  answered_questions: string;
  presentation_materials: string;
  session_helpful: string;
};

interface AddEditModalProps {
  isOpen: boolean;
  onClose: () => void;
  form: FormData;
  onFormChange: (updates: Partial<FormData>) => void;
  onSubmit: (e: React.FormEvent) => void;
  error: string | null;
  events: { event_id: number; event_name: string }[];
  editingId: number | null;
}

function AddEditModal({ 
  isOpen, 
  onClose, 
  form, 
  onFormChange, 
  onSubmit, 
  error, 
  events, 
  editingId 
}: AddEditModalProps) {
  const ErrorAlert = () => error ? (
    <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm mb-4 transition-all">
      {error}
    </div>
  ) : null;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
            exit={{ scale: 0.95 }}
            className="bg-white rounded-lg p-6 max-w-lg w-full max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">
                {editingId ? 'Edit Evaluation' : 'Add Evaluation'}
              </h3>
              <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
                <XMarkIcon className="w-6 h-6" />
              </button>
            </div>
            <ErrorAlert />
            <form onSubmit={onSubmit} className="space-y-6">
              {/* Basic Info */}
              <div className="space-y-3">
                <h4 className="text-sm font-medium text-gray-700">Basic Information</h4>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">Employee No (optional)</label>
                  <input
                    type="text"
                    value={form.employee_no}
                    onChange={(e) => onFormChange({ employee_no: e.target.value })}
                    className="w-full p-2 border border-gray-300 rounded-md text-sm"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">Employee Name *</label>
                  <input
                    type="text"
                    value={form.employee_name}
                    onChange={(e) => onFormChange({ employee_name: e.target.value })}
                    required
                    className="w-full p-2 border border-gray-300 rounded-md text-sm"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">Event *</label>
                  <select
                    value={form.event_id}
                    onChange={(e) => onFormChange({ event_id: Number(e.target.value) })}
                    required
                    className="w-full p-2 border border-gray-300 rounded-md text-sm"
                  >
                    <option value={0}>Select Event</option>
                    {events.map((event) => (
                      <option key={event.event_id} value={event.event_id}>
                        {event.event_name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Criteria Legend */}
              <div className="p-3 bg-gray-50 rounded-md text-xs text-gray-600">
                <strong>Criteria:</strong> 5 – Excellent | 4 – Very Good | 3 – Good | 2 – Fair | 1 – Needs Improvement | NA – Not Applicable
              </div>

              {/* Overall Conduct of Activity */}
              <div className="space-y-3">
                <h4 className="text-sm font-medium text-gray-700 border-b pb-1">Overall Conduct of Activity</h4>
                {[
                  { key: 'objectives_met', label: 'Objectives were met' },
                  { key: 'relevance', label: 'Relevance' },
                  { key: 'venue', label: 'Venue' },
                  { key: 'activity', label: 'Activity' },
                  { key: 'value_time_spent', label: 'Value of Time Spent' },
                  { key: 'overall_rating', label: 'Overall Rating' }
                ].map(({ key, label }) => (
                  <div key={key}>
                    <label className="block text-xs font-medium text-gray-600 mb-1">{label}</label>
                    <select
                      value={form[key as keyof FormData] || ''}
                      onChange={(e) => onFormChange({ [key]: e.target.value } as Partial<FormData>)}
                      className="w-full p-2 border border-gray-300 rounded-md text-sm"
                    >
                      <option value="">Select</option>
                      {['1', '2', '3', '4', '5', 'NA'].map((val) => (
                        <option key={val} value={val}>{val}</option>
                      ))}
                    </select>
                  </div>
                ))}
              </div>

              {/* Resource Speaker */}
              <div className="space-y-3">
                <h4 className="text-sm font-medium text-gray-700 border-b pb-1">Resource Speaker</h4>
                {[
                  { key: 'topic_clear_effective', label: 'Discussed topic clearly and effectively' },
                  { key: 'answered_questions', label: 'Answered questions appropriately' },
                  { key: 'presentation_materials', label: 'Presentation/materials' }
                ].map(({ key, label }) => (
                  <div key={key}>
                    <label className="block text-xs font-medium text-gray-600 mb-1">{label}</label>
                    <select
                      value={form[key as keyof FormData] || ''}
                      onChange={(e) => onFormChange({ [key]: e.target.value } as Partial<FormData>)}
                      className="w-full p-2 border border-gray-300 rounded-md text-sm"
                    >
                      <option value="">Select</option>
                      {['1', '2', '3', '4', '5', 'NA'].map((val) => (
                        <option key={val} value={val}>{val}</option>
                      ))}
                    </select>
                  </div>
                ))}
              </div>

              {/* Session Helpful */}
              <div className="space-y-3">
                <h4 className="text-sm font-medium text-gray-700 border-b pb-1">Session Feedback</h4>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">This session was helpful</label>
                  <select
                    value={form.session_helpful || ''}
                    onChange={(e) => onFormChange({ session_helpful: e.target.value })}
                    className="w-full p-2 border border-gray-300 rounded-md text-sm"
                  >
                    <option value="">Select</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                  </select>
                </div>
              </div>

              <button
                type="submit"
                className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 text-sm font-medium"
              >
                {editingId ? 'Update' : 'Add'} Evaluation
              </button>
            </form>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

// Helper to compute average rating (ignores 'NA')
function computeAverage(ratings: (string | undefined)[]): string {
  const valid = ratings.filter(r => r && r !== 'NA').map(Number);
  return valid.length > 0 ? (valid.reduce((a, b) => a + b, 0) / valid.length).toFixed(1) : 'N/A';
}

export function Evaluations() {
  const [evaluations, setEvaluations] = useState<Evaluation[]>([]);
  const [form, setForm] = useState<FormData>({
    employee_no: '',
    employee_name: '',
    event_id: 0,
    objectives_met: '',
    relevance: '',
    venue: '',
    activity: '',
    value_time_spent: '',
    overall_rating: '',
    topic_clear_effective: '',
    answered_questions: '',
    presentation_materials: '',
    session_helpful: ''
  });
  const [editingId, setEditingId] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [search, setSearch] = useState('');
  const [selectedEventId, setSelectedEventId] = useState<number>(0);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [pagination, setPagination] = useState<PaginationType>({ total: 0, page: 1, limit: 10, totalPages: 0 });
  const [showUploadResult, setShowUploadResult] = useState(false);
  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);
  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());
  const [events, setEvents] = useState<{ event_id: number; event_name: string }[]>([]);
  const [tableLoading, setTableLoading] = useState(false);
  const [sortBy, setSortBy] = useState<string>('evaluation_id');
  const [sortOrder, setSortOrder] = useState<'ASC' | 'DESC'>('DESC');

  const exportParams = {
    ...(search && { search }),
    ...(selectedEventId > 0 && { event_id: selectedEventId.toString() })
  };

  const handleFormChange = useCallback((updates: Partial<FormData>) => {
    setForm(prev => ({ ...prev, ...updates }));
  }, []);

  const handleCloseModal = useCallback(() => {
    setIsModalOpen(false);
    setEditingId(null);
    setForm({
      employee_no: '',
      employee_name: '',
      event_id: 0,
      objectives_met: '',
      relevance: '',
      venue: '',
      activity: '',
      value_time_spent: '',
      overall_rating: '',
      topic_clear_effective: '',
      answered_questions: '',
      presentation_materials: '',
      session_helpful: ''
    });
    setError(null);
  }, []);

  const handleOpenModal = useCallback((evaluation?: Evaluation) => {
    if (evaluation) {
      setEditingId(evaluation.evaluation_id);
      setForm({
        employee_no: evaluation.employee_no || '',
        employee_name: evaluation.employee_name,
        event_id: evaluation.event_id,
        objectives_met: evaluation.objectives_met || '',
        relevance: evaluation.relevance || '',
        venue: evaluation.venue || '',
        activity: evaluation.activity || '',
        value_time_spent: evaluation.value_time_spent || '',
        overall_rating: evaluation.overall_rating || '',
        topic_clear_effective: evaluation.topic_clear_effective || '',
        answered_questions: evaluation.answered_questions || '',
        presentation_materials: evaluation.presentation_materials || '',
        session_helpful: evaluation.session_helpful || ''
      });
    } else {
      setEditingId(null);
      setForm({
        employee_no: '',
        employee_name: '',
        event_id: 0,
        objectives_met: '',
        relevance: '',
        venue: '',
        activity: '',
        value_time_spent: '',
        overall_rating: '',
        topic_clear_effective: '',
        answered_questions: '',
        presentation_materials: '',
        session_helpful: ''
      });
    }
    setError(null);
    setIsModalOpen(true);
  }, []);

  useEffect(() => {
    loadEvents();
    loadEvaluations();
  }, [pagination.page, pagination.limit, search, selectedEventId, sortBy, sortOrder]);

  async function loadEvents() {
    try {
      const res = await api.get('/events/all');
      setEvents(res.data.events || []);
    } catch (e: any) {
      toast.error('Failed to load events');
    }
  }

  async function loadEvaluations() {
  try {
    setLoading(true);
    setError(null);
    const params = new URLSearchParams({
      page: pagination.page.toString(),
      limit: pagination.limit.toString(),
      ...(search && { search }),
      ...(selectedEventId > 0 && { event_id: selectedEventId.toString() }),
      sort: sortBy,
      order: sortOrder
    });
    const res = await api.get(`/evaluations?${params}`);
    setEvaluations(res.data.evaluations || []);
    setPagination(res.data.pagination || { total: 0, page: 1, limit: 10, totalPages: 0 });
  } catch (e: any) {
    setError('Failed to load evaluations');
    toast.error('Failed to load evaluations');
  } finally {
    setLoading(false);
  }
}

  const handleBulkDelete = async () => {
  if (!confirm(`Delete ${selectedRows.size} selected records?`)) return;

  try {
    await api.post('/evaluations/bulk-delete', { ids: Array.from(selectedRows) });
    toast.success('Bulk delete successful');
    setSelectedRows(new Set());
    // --- REFRESH DATA ---
    await loadEvaluations(); // reuse existing load logic
  } catch (e: any) {
    toast.error(e.response?.data?.error || 'Bulk delete failed');
  }
};

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!form.employee_name.trim() || form.event_id === 0) {
      toast.error('Employee name and event are required');
      return;
    }
    try {
      setError(null);
      const payload = {
        ...form,
        employee_no: form.employee_no.trim() || undefined
      };
      if (editingId) {
        await api.put(`/evaluations/${editingId}`, payload);
        toast.success('Evaluation updated successfully');
      } else {
        await api.post('/evaluations', payload);
        toast.success('Evaluation added successfully');
      }
      handleCloseModal();
      loadEvaluations();
    } catch (e: any) {
      setError(e.response?.data?.error || 'Failed to save evaluation');
      toast.error(e.response?.data?.error || 'Failed to save evaluation');
    }
  }

  function handlePageChange(newPage: number) {
    setPagination({ ...pagination, page: newPage });
  }

  function handleLimitChange(newLimit: number) {
    setPagination({ ...pagination, page: 1, limit: newLimit });
  }

    function handleSearchChange(value: string) {
    setSearch(value); // Immediate set; debounce handled in SearchInput
    setPagination(prev => ({ ...prev, page: 1 })); // Reset page
  }

  function handleEventChange(eventId: number) {
    setSelectedEventId(eventId);
    setPagination({ ...pagination, page: 1 });
  }

  function handleSort(column: string) {
    if (sortBy !== column) {
      setSortBy(column);
      setSortOrder('ASC');
    } else {
      setSortOrder(sortOrder === 'ASC' ? 'DESC' : 'ASC');
    }
    setPagination(prev => ({ ...prev, page: 1 }));
  }

  function toggleRow(id: number) {
    const newSelected = new Set(selectedRows);
    if (newSelected.has(id)) {
      newSelected.delete(id);
    } else {
      newSelected.add(id);
    }
    setSelectedRows(newSelected);
  }

  function toggleAll() {
    if (selectedRows.size === evaluations.length) {
      setSelectedRows(new Set());
    } else {
      setSelectedRows(new Set(evaluations.map(e => e.evaluation_id)));
    }
  }

  const isAllSelected = evaluations.length > 0 && selectedRows.size === evaluations.length;

  // Compute averages for each evaluation
  const evaluationsWithAverages = evaluations.map(e => ({
    ...e,
    overallConductAvg: computeAverage([
      e.objectives_met, e.relevance, e.venue, e.activity, 
      e.value_time_spent, e.overall_rating
    ]),
    resourceSpeakerAvg: computeAverage([
      e.topic_clear_effective, e.answered_questions, e.presentation_materials
    ])
  }));

  const getSortIcon = (column: string) => {
    if (sortBy !== column) return null;
    return sortOrder === 'ASC' ? <ChevronUpIcon className="w-3 h-3 ml-1" /> : <ChevronDownIcon className="w-3 h-3 ml-1" />;
  };

  return (
    <div className="space-y-6">
      <Toaster />
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h1 className="text-2xl font-bold text-gray-900">Evaluations</h1>
        <div className="flex items-center gap-3">
        <SearchInput value={search} onChange={handleSearchChange} placeholder="Search name or employee no..." />
        <motion.button
          whileHover={{ scale: 1.05 }}
          onClick={() => handleOpenModal()}
          className="bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700 transition-colors shadow-sm"
        >
          <PlusIcon className="w-5 h-5" />
        </motion.button>
      </div>
      </div>

      <FileActionsBar
        uploadEndpoint="/evaluations/upload"
        exportEndpoint="/evaluations/export"
        templateEndpoint="/evaluations/template"
        exportParams={exportParams}
        uploadLabel="Upload Registrations"
        onUploadComplete={loadEvaluations}
      />
      
      <div className="overflow-x-auto bg-white rounded-lg shadow">

        {/* Event Filter + Bulk Delete */}
        <div className="p-4 border-b bg-gray-50 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <label className="text-sm font-medium text-gray-700">Event:</label>
            <EventFilterDropdown selectedEventId={selectedEventId} onChange={setSelectedEventId} />
          </div>

        {selectedRows.size > 0 && (
          <button
            onClick={handleBulkDelete}
            className="flex items-center gap-1.5 px-3 py-1.5 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors shadow-sm"
            aria-label={`Delete ${selectedRows.size} selected records`}
          >
            <TrashIcon className="w-4 h-4" />
            Delete ({selectedRows.size})
          </button>
        )}
      </div>
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <input
                  type="checkbox"
                  checked={isAllSelected}
                  onChange={toggleAll}
                  className="rounded border-gray-300"
                />
              </th>
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                onClick={() => handleSort('employee_no')}
              >
                Employee No {getSortIcon('employee_no')}
              </th>
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                onClick={() => handleSort('employee_name')}
              >
                Name {getSortIcon('employee_name')}
              </th>
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                // Note: Computed; sort by employee_name as fallback if needed
              >
                Overall Conduct Avg
              </th>
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
              >
                Resource Speaker Avg
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            <TableContainer loading={loading} data={evaluationsWithAverages} emptyMessage="No evaluations found." modulename="evaluations">
              {evaluationsWithAverages.map((evaluation) => (
                <tr key={evaluation.evaluation_id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <input
                      type="checkbox"
                      checked={selectedRows.has(evaluation.evaluation_id)}
                      onChange={() => toggleRow(evaluation.evaluation_id)}
                      className="rounded border-gray-300"
                    />
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {evaluation.employee_no || 'N/A'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {evaluation.employee_name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {evaluation.overallConductAvg}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {evaluation.resourceSpeakerAvg}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                    <button
                      onClick={() => handleOpenModal(evaluation)}
                      className="text-indigo-600 hover:text-indigo-900"
                    >
                      <PencilIcon className="w-4 h-4" />
                    </button>
                    <button
                      onClick={async () => {
                        if (confirm('Delete this evaluation?')) {
                          try {
                            await api.delete(`/evaluations/${evaluation.evaluation_id}`);
                            toast.success('Evaluation deleted');
                            loadEvaluations();
                          } catch (e: any) {
                            toast.error('Delete failed');
                          }
                        }
                      }}
                      className="text-red-600 hover:text-red-900"
                    >
                      <TrashIcon className="w-4 h-4" />
                    </button>
                  </td>
                </tr>
              ))}
            </TableContainer>
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex justify-between items-center mt-6">
        <div className="text-sm text-gray-700">
          Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total}
        </div>
      <Pagination
        page={pagination.page}
        totalPages={pagination.totalPages}
        onPageChange={handlePageChange}
        disabled={loading}
      />
      </div>

      <UploadResultModal
        result={uploadResult}
        isOpen={showUploadResult}
        onClose={() => setShowUploadResult(false)}
      />

      <AddEditModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        form={form}
        onFormChange={handleFormChange}
        onSubmit={handleSubmit}
        error={error}
        events={events}
        editingId={editingId}
      />
    </div>
  );
}
`

Frontend Context

Attendance.tsx
`
import { useEffect, useState } from 'react';
import { api } from '../services/api';

type AttendanceRow = { 
  attendance_id: number; 
  employee_no: string | null; 
  employee_name: string | null; 
  department: string | null; 
  event_id: number; 
  mode_of_attendance: 'Virtual' | 'Onsite'; 
  validation_status: 'Registered' | 'Not Registered';
  event?: { event_name: string; event_type: string; event_date: string };
};

type EventOption = { event_id: number; event_name: string };
type DepartmentOption = string;

export function Attendance() {
  const [rows, setRows] = useState<AttendanceRow[]>([]);
  const [events, setEvents] = useState<EventOption[]>([]);
  const [departments, setDepartments] = useState<DepartmentOption[]>([]);
  const [form, setForm] = useState({ employee_no: '', employee_name: '', department: '', mode_of_attendance: 'Onsite', event_name: '' });
  const [editingAttendance, setEditingAttendance] = useState<AttendanceRow | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  // Pagination and filtering state
  const [pagination, setPagination] = useState({ total: 0, page: 1, limit: 10, totalPages: 0 });
  const [filters, setFilters] = useState({ 
    event_name: '', 
    employee_no: '', 
    employee_name: '', 
    department: ''
  });
  const [sorting, setSorting] = useState({ sort: 'attendance_id', order: 'DESC' });

  async function loadEvents() {
    try {
      const res = await api.get('/events'); // Assumes /events returns { events: [...] }
      setEvents(res.data.events || []);
    } catch (e: any) {
      console.error('Failed to load events:', e);
      setError('Failed to load events for autocomplete');
    }
  }

  async function loadDepartments() {
    try {
      const res = await api.get('/attendance/departments');
      setDepartments(res.data);
    } catch (e: any) {
      console.error('Failed to load departments:', e);
      setError('Failed to load departments for autocomplete');
    }
  }

  async function load() {
    try {
      setError(null);
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
        sort: sorting.sort,
        order: sorting.order,
        ...(filters.event_name && { event_name: filters.event_name }),
        ...(filters.employee_no && { employee_no: filters.employee_no }),
        ...(filters.employee_name && { employee_name: filters.employee_name }),
        ...(filters.department && { department: filters.department })
      });
      
      const res = await api.get(`/attendance?${params}`);
      setRows(res.data.attendance);
      setPagination(res.data.pagination);
    } catch (e: any) {
      console.error('Failed to load attendance:', e);
      setError(e.response?.data?.error || 'Failed to load attendance');
    }
  }
  
  useEffect(() => { 
    loadEvents();
    loadDepartments();
    load(); 
  }, [pagination.page, pagination.limit, sorting.sort, sorting.order, filters.event_name, filters.employee_no, filters.employee_name, filters.department]);

  async function upload(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;
    const formData = new FormData();
    formData.append('file', file);
    try {
      setError(null);
      await api.post('/attendance/upload', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      await load();
    } catch (e: any) {
      console.error('Failed to upload file:', e);
      setError(e.response?.data?.error || 'Failed to upload file');
    }
  }

  async function submit(e: React.FormEvent) {
    e.preventDefault();
    const trimmedName = form.employee_name.trim();
    if (form.employee_no.trim() === '' && (!trimmedName || trimmedName.length < 2)) {
      setError('Employee Name is required for walk-in attendance');
      return;
    }
    const payload = { 
      ...form, 
      employee_no: form.employee_no.trim() === '' ? '' : form.employee_no.trim(),  // Empty â†’ backend to 'NA'
      employee_name: trimmedName || null,
      department: form.department.trim() || null,
      event_name: form.event_name.trim()
    };
    try {
      setError(null);
      await api.post('/attendance', payload);
      setForm({ employee_no: '', employee_name: '', department: '', mode_of_attendance: 'Onsite', event_name: '' });
      await load();
    } catch (e: any) {
      console.error('Failed to create attendance:', e);
      setError(e.response?.data?.error || (e.response?.data?.details ? `Validation error: ${JSON.stringify(e.response.data.details)}` : 'Failed to create attendance'));
    }
  }

  async function updateAttendance(e: React.FormEvent) {
    e.preventDefault();
    if (!editingAttendance) return;
    const trimmedName = form.employee_name.trim();
    if (form.employee_no.trim() === '' && (!trimmedName || trimmedName.length < 2)) {
      setError('Employee Name is required for walk-in attendance');
      return;
    }
    const payload = { 
      ...form, 
      employee_no: form.employee_no.trim() === '' ? '' : form.employee_no.trim(),
      employee_name: trimmedName || null,
      department: form.department.trim() || null,
      event_name: form.event_name.trim()
    };
    try {
      setError(null);
      await api.put(`/attendance/${editingAttendance.attendance_id}`, payload);
      setEditingAttendance(null);
      setForm({ employee_no: '', employee_name: '', department: '', mode_of_attendance: 'Onsite', event_name: '' });
      await load();
    } catch (e: any) {
      console.error('Failed to update attendance:', e);
      setError(e.response?.data?.error || (e.response?.data?.details ? `Validation error: ${JSON.stringify(e.response.data.details)}` : 'Failed to update attendance'));
    }
  }

  async function deleteAttendance(id: number) {
    if (!confirm('Are you sure you want to delete this attendance record?')) return;
    try {
      setError(null);
      await api.delete(`/attendance/${id}`);
      await load();
    } catch (e: any) {
      console.error('Failed to delete attendance:', e);
      setError('Failed to delete attendance');
    }
  }

  function startEdit(attendance: AttendanceRow) {
    setEditingAttendance(attendance);
    setForm({
      employee_no: attendance.employee_no === 'NA' ? '' : (attendance.employee_no || ''),
      employee_name: attendance.employee_name || '',
      department: attendance.department || '',
      mode_of_attendance: attendance.mode_of_attendance,
      event_name: attendance.event?.event_name || ''
    });
    setError(null);
  }

  function cancelEdit() {
    setEditingAttendance(null);
    setForm({ employee_no: '', employee_name: '', department: '', mode_of_attendance: 'Onsite', event_name: '' });
    setError(null);
  }

  function handleSort(field: string) {
    const newOrder = sorting.sort === field && sorting.order === 'ASC' ? 'DESC' : 'ASC';
    setSorting({ sort: field, order: newOrder });
  }

  // Error display component
  const ErrorAlert = () => error ? (
    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
      {error}
    </div>
  ) : null;

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Attendance</h2>
      
      <ErrorAlert />
      
      {/* Filters */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h3 className="text-lg font-medium mb-3">Filters</h3>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Event Name</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Event Name" 
              value={filters.event_name} 
              onChange={e => setFilters({ ...filters, event_name: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Employee No</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Employee No" 
              value={filters.employee_no} 
              onChange={e => setFilters({ ...filters, employee_no: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Employee Name</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Employee Name" 
              value={filters.employee_name} 
              onChange={e => setFilters({ ...filters, employee_name: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Department</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Department" 
              value={filters.department} 
              onChange={e => setFilters({ ...filters, department: e.target.value })} 
            />
          </div>
        </div>
      </div>
      
      {/* Import Section */}
      <div className="flex items-center gap-3">
        <label className="text-sm font-medium">Import Attendance:</label>
        <input type="file" accept=".xlsx,.xls,.csv" onChange={upload} className="border p-2 rounded" />
      </div>
      
      {/* Add/Edit Form */}
      <form onSubmit={editingAttendance ? updateAttendance : submit} className="grid grid-cols-5 gap-3 items-end">
        <input 
          className="border p-2 rounded" 
          placeholder="Employee No (optional)" 
          value={form.employee_no} 
          onChange={e => setForm({ ...form, employee_no: e.target.value })} 
        />
        <input 
          className="border p-2 rounded" 
          placeholder="Employee Name" 
          value={form.employee_name} 
          onChange={e => setForm({ ...form, employee_name: e.target.value })} 
          required={form.employee_no.trim() === ''}
        />
        <input 
          className="border p-2 rounded" 
          placeholder="Department" 
          list="departments-list"
          value={form.department} 
          onChange={e => setForm({ ...form, department: e.target.value })} 
        />
        <datalist id="departments-list">
          {departments.map(dept => <option key={dept} value={dept} />)}
        </datalist>
        <select className="border p-2 rounded" value={form.mode_of_attendance} onChange={e => setForm({ ...form, mode_of_attendance: e.target.value as any })}>
          <option>Onsite</option>
          <option>Virtual</option>
        </select>
        <input 
          className="border p-2 rounded" 
          placeholder="Event Name" 
          list="events-list"
          value={form.event_name} 
          onChange={e => setForm({ ...form, event_name: e.target.value })} 
          required
        />
        <datalist id="events-list">
          {events.map(event => <option key={event.event_id} value={event.event_name} />)}
        </datalist>
        <div className="flex gap-2 col-span-5">
          <button className="bg-blue-600 text-white px-4 py-2 rounded" type="submit">
            {editingAttendance ? 'Update' : 'Add'} Attendance
          </button>
          {editingAttendance && (
            <button type="button" onClick={cancelEdit} className="bg-gray-600 text-white px-4 py-2 rounded">
              Cancel
            </button>
          )}
        </div>
      </form>
      
      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border">
          <thead>
            <tr className="bg-gray-100 text-left">
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('attendance_id')}>
                ID {sorting.sort === 'attendance_id' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('employee_no')}>
                Emp No {sorting.sort === 'employee_no' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('employee_name')}>
                Name {sorting.sort === 'employee_name' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('department')}>
                Dept {sorting.sort === 'department' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border">Event Name</th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('mode_of_attendance')}>
                Mode {sorting.sort === 'mode_of_attendance' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('validation_status')}>
                Status {sorting.sort === 'validation_status' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {rows.map(r => (
              <tr key={r.attendance_id}>
                <td className="p-2 border">{r.attendance_id}</td>
                <td className="p-2 border">{r.employee_no === 'NA' ? 'N/A' : (r.employee_no || 'N/A')}</td>
                <td className="p-2 border">{r.employee_name || 'N/A'}</td>
                <td className="p-2 border">{r.department || 'N/A'}</td>
                <td className="p-2 border">{r.event?.event_name || 'N/A'}</td>
                <td className="p-2 border">{r.mode_of_attendance}</td>
                <td className="p-2 border">{r.validation_status}</td>
                <td className="p-2 border">
                  <div className="flex gap-2">
                    <button
                      onClick={() => startEdit(r)}
                      className="bg-blue-500 text-white px-2 py-1 rounded text-sm hover:bg-blue-600"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => deleteAttendance(r.attendance_id)}
                      className="bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600"
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {/* Pagination */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-gray-600">
          Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} attendance
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => setPagination({ ...pagination, page: pagination.page - 1 })}
            disabled={pagination.page <= 1}
            className="px-3 py-1 border rounded disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          <span className="px-3 py-1">
            Page {pagination.page} of {pagination.totalPages}
          </span>
          <button
            onClick={() => setPagination({ ...pagination, page: pagination.page + 1 })}
            disabled={pagination.page >= pagination.totalPages}
            className="px-3 py-1 border rounded disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
}

`

Events.tsx
`
import { useEffect, useState } from 'react';
import { api } from '../services/api';

type Event = { event_id: number; event_type: string; event_name: string; event_date: string };

export function Events() {
  const [events, setEvents] = useState<Event[]>([]);
  const [form, setForm] = useState({ event_type: '', event_name: '', event_date: '' });
  const [editingEvent, setEditingEvent] = useState<Event | null>(null);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  
  // Pagination and filtering state
  const [pagination, setPagination] = useState({ total: 0, page: 1, limit: 10, totalPages: 0 });
  const [filters, setFilters] = useState({ type: '', name: '', date: '' });
  const [sorting, setSorting] = useState({ sort: 'event_date', order: 'DESC' });

  async function load() {
    setLoading(true);
    setError('');
    try {
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
        sort: sorting.sort,
        order: sorting.order,
        ...(filters.type && { type: filters.type }),
        ...(filters.name && { name: filters.name }),
        ...(filters.date && { date: filters.date })
      });
      
      const res = await api.get(`/events?${params}`);
      setEvents(res.data.events);
      setPagination(res.data.pagination);
    } catch (e: any) {
      const status = e?.response?.status;
      if (status === 401) setError('Unauthorized. Please login first.');
      else setError(e?.response?.data?.error || 'Failed to load events. Check API URL and server.');
      setEvents([]);
    } finally {
      setLoading(false);
    }
  }
  
  useEffect(() => { load(); }, [pagination.page, pagination.limit, sorting.sort, sorting.order, filters.type, filters.name, filters.date]);

  async function submit(e: React.FormEvent) {
    e.preventDefault();
    if (!form.event_type || !form.event_name || !form.event_date) return;
    try {
      await api.post('/events', form);
      setForm({ event_type: '', event_name: '', event_date: '' });
      await load();
    } catch (e: any) {
      setError(e?.response?.data?.error || 'Failed to create event');
    }
  }

  async function updateEvent(e: React.FormEvent) {
    e.preventDefault();
    if (!editingEvent || !form.event_type || !form.event_name || !form.event_date) return;
    try {
      await api.put(`/events/${editingEvent.event_id}`, form);
      setEditingEvent(null);
      setForm({ event_type: '', event_name: '', event_date: '' });
      await load();
    } catch (e: any) {
      setError(e?.response?.data?.error || 'Failed to update event');
    }
  }

  async function deleteEvent(id: number) {
    if (!confirm('Are you sure you want to delete this event?')) return;
    try {
      await api.delete(`/events/${id}`);
      await load();
    } catch (e: any) {
      setError(e?.response?.data?.error || 'Failed to delete event');
    }
  }

  function startEdit(event: Event) {
    setEditingEvent(event);
    setForm({ event_type: event.event_type, event_name: event.event_name, event_date: event.event_date });
  }

  function cancelEdit() {
    setEditingEvent(null);
    setForm({ event_type: '', event_name: '', event_date: '' });
  }

  function handleSort(field: string) {
    const newOrder = sorting.sort === field && sorting.order === 'ASC' ? 'DESC' : 'ASC';
    setSorting({ sort: field, order: newOrder });
  }

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Events</h2>
      {error && <div className="text-sm text-red-600">{error}</div>}
      {loading && <div className="text-sm text-gray-600">Loading...</div>}
      
      {/* Filters */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h3 className="text-lg font-medium mb-3">Filters</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Event Type</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by event type" 
              value={filters.type} 
              onChange={e => setFilters({ ...filters, type: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Event Name</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by event name" 
              value={filters.name} 
              onChange={e => setFilters({ ...filters, name: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Event Date</label>
            <input 
              className="border p-2 w-full rounded" 
              type="date" 
              value={filters.date} 
              onChange={e => setFilters({ ...filters, date: e.target.value })} 
            />
          </div>
        </div>
      </div>
      
      {/* Import Section */}
      <div className="flex items-center gap-3">
        <label className="text-sm font-medium">Import Events (CSV/XLSX):</label>
        <input
          type="file"
          accept=".xlsx,.xls,.csv"
          onChange={async e => {
            const file = e.target.files?.[0];
            if (!file) return;
            setUploading(true);
            try {
              const formData = new FormData();
              formData.append('file', file);
              await api.post('/events/upload', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
              await load();
            } catch (e: any) {
              setError(e?.response?.data?.error || 'Failed to upload file');
            } finally {
              setUploading(false);
            }
          }}
          className="border p-2 rounded"
        />
        {uploading && <span className="text-sm text-gray-600">Uploading...</span>}
      </div>
      
      {/* Add/Edit Form */}
      <form onSubmit={editingEvent ? updateEvent : submit} className="grid grid-cols-4 gap-3 items-end">
        <input className="border p-2 rounded" placeholder="Event Type" value={form.event_type} onChange={e => setForm({ ...form, event_type: e.target.value })} />
        <input className="border p-2 rounded" placeholder="Event Name" value={form.event_name} onChange={e => setForm({ ...form, event_name: e.target.value })} />
        <input className="border p-2 rounded" type="date" value={form.event_date} onChange={e => setForm({ ...form, event_date: e.target.value })} />
        <div className="flex gap-2">
          <button className="bg-blue-600 text-white px-4 py-2 rounded">
            {editingEvent ? 'Update' : 'Add'}
          </button>
          {editingEvent && (
            <button type="button" onClick={cancelEdit} className="bg-gray-600 text-white px-4 py-2 rounded">
              Cancel
            </button>
          )}
        </div>
      </form>
      
      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border">
          <thead>
            <tr className="bg-gray-100 text-left">
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('event_id')}>
                ID {sorting.sort === 'event_id' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('event_type')}>
                Type {sorting.sort === 'event_type' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('event_name')}>
                Name {sorting.sort === 'event_name' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('event_date')}>
                Date {sorting.sort === 'event_date' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {events.map(ev => (
              <tr key={ev.event_id}>
                <td className="p-2 border">{ev.event_id}</td>
                <td className="p-2 border">{ev.event_type}</td>
                <td className="p-2 border">{ev.event_name}</td>
                <td className="p-2 border">{new Date(ev.event_date).toLocaleDateString()}</td>
                <td className="p-2 border">
                  <div className="flex gap-2">
                    <button
                      onClick={() => startEdit(ev)}
                      className="bg-blue-500 text-white px-2 py-1 rounded text-sm hover:bg-blue-600"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => deleteEvent(ev.event_id)}
                      className="bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600"
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {/* Pagination */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-gray-600">
          Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} events
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => setPagination({ ...pagination, page: pagination.page - 1 })}
            disabled={pagination.page <= 1}
            className="px-3 py-1 border rounded disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          <span className="px-3 py-1">
            Page {pagination.page} of {pagination.totalPages}
          </span>
          <button
            onClick={() => setPagination({ ...pagination, page: pagination.page + 1 })}
            disabled={pagination.page >= pagination.totalPages}
            className="px-3 py-1 border rounded disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
}



`

Landing.tsx
`
export function Landing() {
  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-semibold">Welcome to HWD Attendance & Events</h1>
      <p className="text-gray-700">Follow these steps to use the system:</p>
      <ol className="list-decimal pl-6 space-y-2 text-gray-800">
        <li>Create or verify events under the Events page.</li>
        <li>Upload Registrations using the template on Registrations.</li>
        <li>Record Attendance via manual entry or file upload.</li>
        <li>View analytics and export from the Reports page.</li>
      </ol>
      <div className="bg-blue-50 p-4 rounded border border-blue-200">
        <div className="font-medium">CSV Templates</div>
        <ul className="list-disc pl-6 text-sm text-gray-700">
          <li>Events.csv: Event ID | Event Type | Event Name | Event Date</li>
          <li>Registration.csv: Employee No | Employee Name | Department | Event ID | Status</li>
          <li>Attendance.csv: Employee No | Employee Name | Department | Mode of Attendance | Event ID</li>
        </ul>
      </div>
    </div>
  );
}



`

Login.tsx
`
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { api } from '../services/api';

export function Login() {
  const [form, setForm] = useState({ username: '', password: '' });
  const [error, setError] = useState('');
  const navigate = useNavigate();

  async function submit(e: React.FormEvent) {
    e.preventDefault();
    try {
      const res = await api.post('/auth/login', form);
      localStorage.setItem('token', res.data.token);
      navigate('/');
      window.location.reload(); // Refresh to update auth state
    } catch (e: any) {
      setError(e?.response?.data?.error || 'Login failed');
    }
  }

  return (
    <div className="max-w-sm mx-auto bg-white border rounded p-6 mt-10">
      <div className="text-lg font-semibold mb-4">Admin Login</div>
      <form onSubmit={submit} className="space-y-3">
        <input className="border p-2 w-full rounded" placeholder="Username" value={form.username} onChange={e => setForm({ ...form, username: e.target.value })} />
        <input type="password" className="border p-2 w-full rounded" placeholder="Password" value={form.password} onChange={e => setForm({ ...form, password: e.target.value })} />
        {error && <div className="text-red-600 text-sm">{error}</div>}
        <button className="bg-blue-600 text-white px-4 py-2 rounded w-full">Login</button>
      </form>
    </div>
  );
}



`

NotFound.tsx
`
export function NotFound() {
  return <div className="text-center text-gray-600 mt-10">Page not found.</div>;
}



`

Registrations.tsx
`
import { useEffect, useState } from 'react';
import { api } from '../services/api';

type RegistrationRow = { 
  reg_id: number; 
  employee_no: string | null; 
  employee_name: string | null; 
  department: string | null; 
  event_id: number; 
  event?: { event_name: string; event_type: string; event_date: string };
};

type EventOption = { event_id: number; event_name: string };
type DepartmentOption = string;

export function Registrations() {
  const [rows, setRows] = useState<RegistrationRow[]>([]);
  const [events, setEvents] = useState<EventOption[]>([]); // For event autocomplete
  const [departments, setDepartments] = useState<DepartmentOption[]>([]); // For dept autocomplete
  const [form, setForm] = useState({ employee_no: '', employee_name: '', department: '', event_name: '' });
  const [editingRegistration, setEditingRegistration] = useState<RegistrationRow | null>(null);
  const [error, setError] = useState<string | null>(null); // For user-facing errors
  
  // Pagination and filtering state
  const [pagination, setPagination] = useState({ total: 0, page: 1, limit: 10, totalPages: 0 });
  const [filters, setFilters] = useState({ 
    event_name: '', 
    employee_no: '', 
    employee_name: '', 
    department: ''
  });
  const [sorting, setSorting] = useState({ sort: 'reg_id', order: 'DESC' });

  async function loadEvents() {
    try {
      const res = await api.get('/events'); // Assumes /events endpoint returns all events
      setEvents(res.data.events || []);
    } catch (e: any) {
      console.error('Failed to load events:', e);
      setError('Failed to load events for autocomplete');
    }
  }

  async function loadDepartments() {
    try {
      const res = await api.get('/registrations/departments');
      setDepartments(res.data);
    } catch (e: any) {
      console.error('Failed to load departments:', e);
      setError('Failed to load departments for autocomplete');
    }
  }

  async function load() {
    try {
      setError(null);
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
        sort: sorting.sort,
        order: sorting.order,
        ...(filters.event_name && { event_name: filters.event_name }),
        ...(filters.employee_no && { employee_no: filters.employee_no }),
        ...(filters.employee_name && { employee_name: filters.employee_name }),
        ...(filters.department && { department: filters.department })
      });
      
      const res = await api.get(`/registrations?${params}`);
      setRows(res.data.registrations);
      setPagination(res.data.pagination);
    } catch (e: any) {
      console.error('Failed to load registrations:', e);
      setError(e.response?.data?.error || 'Failed to load registrations');
    }
  }
  
  useEffect(() => { 
    loadEvents();
    loadDepartments();
    load(); 
  }, [pagination.page, pagination.limit, sorting.sort, sorting.order, filters.event_name, filters.employee_no, filters.employee_name, filters.department]);

  async function upload(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;
    const formData = new FormData();
    formData.append('file', file);
    try {
      setError(null);
      await api.post('/registrations/upload', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      await load();
    } catch (e: any) {
      console.error('Failed to upload file:', e);
      setError(e.response?.data?.error || 'Failed to upload file');
    }
  }

  async function submit(e: React.FormEvent) {
    e.preventDefault();
    const payload = { 
      ...form, 
      employee_no: form.employee_no.trim() === '' ? null : form.employee_no.trim(),
      employee_name: form.employee_name.trim() || null,
      department: form.department.trim() || null,
      event_name: form.event_name.trim()
    };
    try {
      setError(null);
      await api.post('/registrations', payload);
      setForm({ employee_no: '', employee_name: '', department: '', event_name: '' });
      await load();
    } catch (e: any) {
      console.error('Failed to create registration:', e);
      setError(e.response?.data?.error || (e.response?.data?.details ? `Validation error: ${JSON.stringify(e.response.data.details)}` : 'Failed to create registration'));
    }
  }

  async function updateRegistration(e: React.FormEvent) {
    e.preventDefault();
    if (!editingRegistration) return;
    const payload = { 
      ...form, 
      employee_no: form.employee_no.trim() === '' ? null : form.employee_no.trim(),
      employee_name: form.employee_name.trim() || null,
      department: form.department.trim() || null,
      event_name: form.event_name.trim()
    };
    try {
      setError(null);
      await api.put(`/registrations/${editingRegistration.reg_id}`, payload);
      setEditingRegistration(null);
      setForm({ employee_no: '', employee_name: '', department: '', event_name: '' });
      await load();
    } catch (e: any) {
      console.error('Failed to update registration:', e);
      setError(e.response?.data?.error || (e.response?.data?.details ? `Validation error: ${JSON.stringify(e.response.data.details)}` : 'Failed to update registration'));
    }
  }

  async function deleteRegistration(id: number) {
    if (!confirm('Are you sure you want to delete this registration?')) return;
    try {
      setError(null);
      await api.delete(`/registrations/${id}`);
      await load();
    } catch (e: any) {
      console.error('Failed to delete registration:', e);
      setError('Failed to delete registration');
    }
  }

  function startEdit(registration: RegistrationRow) {
    setEditingRegistration(registration);
    setForm({
      employee_no: registration.employee_no || '',
      employee_name: registration.employee_name || '',
      department: registration.department || '',
      event_name: registration.event?.event_name || ''
    });
    setError(null);
  }

  function cancelEdit() {
    setEditingRegistration(null);
    setForm({ employee_no: '', employee_name: '', department: '', event_name: '' });
    setError(null);
  }

  function handleSort(field: string) {
    const newOrder = sorting.sort === field && sorting.order === 'ASC' ? 'DESC' : 'ASC';
    setSorting({ sort: field, order: newOrder });
  }

  // Error display component
  const ErrorAlert = () => error ? (
    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
      {error}
    </div>
  ) : null;

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Registrations</h2>
      
      <ErrorAlert />
      
      {/* Filters */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h3 className="text-lg font-medium mb-3">Filters</h3>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Event Name</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Event Name" 
              value={filters.event_name} 
              onChange={e => setFilters({ ...filters, event_name: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Employee No</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Employee No" 
              value={filters.employee_no} 
              onChange={e => setFilters({ ...filters, employee_no: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Employee Name</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Employee Name" 
              value={filters.employee_name} 
              onChange={e => setFilters({ ...filters, employee_name: e.target.value })} 
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Department</label>
            <input 
              className="border p-2 w-full rounded" 
              placeholder="Filter by Department" 
              value={filters.department} 
              onChange={e => setFilters({ ...filters, department: e.target.value })} 
            />
          </div>
        </div>
      </div>
      
      {/* Import Section */}
      <div className="flex items-center gap-3">
        <label className="text-sm font-medium">Import Registrations:</label>
        <input type="file" accept=".xlsx,.xls,.csv" onChange={upload} className="border p-2 rounded" />
      </div>
      
      {/* Add/Edit Form */}
      <form onSubmit={editingRegistration ? updateRegistration : submit} className="grid grid-cols-4 gap-3 items-end">
        <input 
          className="border p-2 rounded" 
          placeholder="Employee No (optional)" 
          value={form.employee_no} 
          onChange={e => setForm({ ...form, employee_no: e.target.value })} 
        />
        <input 
          className="border p-2 rounded" 
          placeholder="Employee Name" 
          value={form.employee_name} 
          onChange={e => setForm({ ...form, employee_name: e.target.value })} 
        />
        <input 
          className="border p-2 rounded" 
          placeholder="Department" 
          list="departments-list"
          value={form.department} 
          onChange={e => setForm({ ...form, department: e.target.value })} 
        />
        <datalist id="departments-list">
          {departments.map(dept => <option key={dept} value={dept} />)}
        </datalist>
        <input 
          className="border p-2 rounded" 
          placeholder="Event Name" 
          list="events-list"
          value={form.event_name} 
          onChange={e => setForm({ ...form, event_name: e.target.value })} 
          required
        />
        <datalist id="events-list">
          {events.map(event => <option key={event.event_id} value={event.event_name} />)}
        </datalist>
        <div className="flex gap-2 col-span-4">
          <button className="bg-blue-600 text-white px-4 py-2 rounded" type="submit">
            {editingRegistration ? 'Update' : 'Add'}
          </button>
          {editingRegistration && (
            <button type="button" onClick={cancelEdit} className="bg-gray-600 text-white px-4 py-2 rounded">
              Cancel
            </button>
          )}
        </div>
      </form>
      
      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border">
          <thead>
            <tr className="bg-gray-100 text-left">
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('reg_id')}>
                Reg ID {sorting.sort === 'reg_id' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('employee_no')}>
                Emp No {sorting.sort === 'employee_no' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('employee_name')}>
                Name {sorting.sort === 'employee_name' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border cursor-pointer hover:bg-gray-200" onClick={() => handleSort('department')}>
                Dept {sorting.sort === 'department' && (sorting.order === 'ASC' ? 'â†‘' : 'â†“')}
              </th>
              <th className="p-2 border">Event Name</th>
              <th className="p-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {rows.map(r => (
              <tr key={r.reg_id}>
                <td className="p-2 border">{r.reg_id}</td>
                <td className="p-2 border">{r.employee_no || 'N/A'}</td>
                <td className="p-2 border">{r.employee_name || 'N/A'}</td>
                <td className="p-2 border">{r.department || 'N/A'}</td>
                <td className="p-2 border">{r.event?.event_name || 'N/A'}</td>
                <td className="p-2 border">
                  <div className="flex gap-2">
                    <button
                      onClick={() => startEdit(r)}
                      className="bg-blue-500 text-white px-2 py-1 rounded text-sm hover:bg-blue-600"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => deleteRegistration(r.reg_id)}
                      className="bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600"
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {/* Pagination */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-gray-600">
          Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} registrations
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => setPagination({ ...pagination, page: pagination.page - 1 })}
            disabled={pagination.page <= 1}
            className="px-3 py-1 border rounded disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          <span className="px-3 py-1">
            Page {pagination.page} of {pagination.totalPages}
          </span>
          <button
            onClick={() => setPagination({ ...pagination, page: pagination.page + 1 })}
            disabled={pagination.page >= pagination.totalPages}
            className="px-3 py-1 border rounded disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
}


`

Reports.tsx
`
import { useEffect, useState } from 'react';
import { api } from '../services/api';

export function Reports() {
  const [eventId, setEventId] = useState('');
  const [summary, setSummary] = useState<any>(null);
  const [overall, setOverall] = useState<any>(null);

  async function load() {
    if (eventId) {
      const s = await api.get(`/reports/event-summary/${eventId}`);
      setSummary(s.data);
    }
    const o = await api.get('/reports/overall');
    setOverall(o.data);
  }
  useEffect(() => { load(); }, [eventId]);

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Reports</h2>
      <div className="flex items-center gap-3">
        <input className="border p-2 rounded" placeholder="Event ID for summary" value={eventId} onChange={e => setEventId(e.target.value)} />
      </div>
      {summary && (
        <div className="bg-white border rounded p-4">
          <div className="font-medium mb-2">Event Summary</div>
          <div className="grid grid-cols-5 gap-3 text-sm">
            <div>Total: {summary.total}</div>
            <div>Virtual: {summary.virtual}</div>
            <div>Onsite: {summary.onsite}</div>
            <div>Registered: {summary.registered}</div>
            <div>Walk-ins: {summary.walkIns}</div>
          </div>
        </div>
      )}
      {overall && (
        <div className="bg-white border rounded p-4">
          <div className="font-medium mb-2">Top Departments</div>
          <ul className="list-disc pl-6 text-sm">
            {(overall.topDepartments || []).map((d: any) => (
              <li key={d.department}>{d.department}: {d.count}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}



`

AppLayout.tsx
`
import { Link, Outlet, useLocation } from 'react-router-dom';
import { useState, useEffect } from 'react';

export function AppLayout() {
  const { pathname } = useLocation();
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('token');
    setIsAuthenticated(!!token);
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsAuthenticated(false);
    window.location.href = '/login';
  };

  const NavLink = ({ to, label }: { to: string; label: string }) => (
    <Link
      to={to}
      className={`px-3 py-2 rounded-md text-sm font-medium ${
        pathname === to ? 'bg-blue-600 text-white' : 'text-blue-700 hover:bg-blue-100'
      }`}
    >
      {label}
    </Link>
  );

  return (
    <div className="min-h-full">
      <nav className="bg-white border-b">
        <div className="mx-auto max-w-6xl px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="font-semibold">HWD Attendance</div>
            <div className="flex gap-2">
              <NavLink to="/" label="Home" />
              <NavLink to="/events" label="Events" />
              <NavLink to="/registrations" label="Registrations" />
              <NavLink to="/attendance" label="Attendance" />
              <NavLink to="/reports" label="Reports" />
            </div>
          </div>
          <div className="flex gap-2">
            {isAuthenticated ? (
              <button
                onClick={handleLogout}
                className="px-3 py-2 rounded-md text-sm font-medium text-red-700 hover:bg-red-100"
              >
                Logout
              </button>
            ) : (
              <Link
                to="/login"
                className="px-3 py-2 rounded-md text-sm font-medium text-blue-700 hover:bg-blue-100"
              >
                Login
              </Link>
            )}
          </div>
        </div>
      </nav>
      <main className="mx-auto max-w-6xl p-4">
        <Outlet />
      </main>
    </div>
  );
}



`

main.tsx
`
import React from 'react';
import ReactDOM from 'react-dom/client';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import './index.css';
import { AppLayout } from './ui/AppLayout';
import { Landing } from './pages/Landing';
import { Events } from './pages/Events';
import { Registrations } from './pages/Registrations';
import { Attendance } from './pages/Attendance';
import { Reports } from './pages/Reports';
import { Login } from './pages/Login';

const router = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
    children: [
      { index: true, element: <Landing /> },
      { path: 'events', element: <Events /> },
      { path: 'registrations', element: <Registrations /> },
      { path: 'attendance', element: <Attendance /> },
      { path: 'reports', element: <Reports /> },
      { path: 'login', element: <Login /> },
    ],
  },
]);

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);



`
Backend Context

package.json
`
{
  "name": "hwd-backend",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "nodemon src/app.js",
    "start": "node src/app.js",
    "migrate": "node run-migration.js",
    "lint": "echo 'no linter configured'"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-validator": "^7.2.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^1.4.5-lts.1",
    "sequelize": "^6.37.7",
    "mysql2": "^3.11.3",
    "sqlite3": "^5.1.7",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

`

src\core\db.js
`
import { Sequelize } from 'sequelize';

const rawDialect = process.env.DB_DIALECT || 'mysql';
// Guard against misformatted env like: "mysql, DB_HOST=127.0.0.1, ..."
const dialect = rawDialect.split(',')[0].trim().toLowerCase();

export const sequelize = new Sequelize(
  process.env.DB_NAME || 'hwd_db',
  process.env.DB_USER || 'root',
  process.env.DB_PASSWORD || '',
  {
    host: process.env.DB_HOST || '127.0.0.1',
    port: Number(process.env.DB_PORT) || 3306,
    dialect,
    storage: dialect === 'sqlite' ? (process.env.DB_STORAGE || 'hwd.sqlite') : undefined,
    logging: false,
  }
);

`

src\core\error-middleware.js
`
export function errorMiddleware(err, _req, res, _next) {
  const status = err.status || 500;
  const message = err.message || 'Internal Server Error';
  const details = err.details;
  res.status(status).json({ error: message, details });
}


`

src\core\models.js
`
import { DataTypes } from 'sequelize';
import { sequelize } from './db.js';

export const Admin = sequelize.define('admin', {
  admin_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  username: { type: DataTypes.STRING, unique: true, allowNull: false },
  password_hash: { type: DataTypes.STRING, allowNull: false },
});

export const Dmag = sequelize.define('dmag', {
  employee_no: { type: DataTypes.STRING, primaryKey: true },
  employee_name: { type: DataTypes.STRING, allowNull: false },
  department: { type: DataTypes.STRING },
  age: { type: DataTypes.INTEGER },
  gender: { type: DataTypes.ENUM('Male', 'Female') },
});

export const Event = sequelize.define('event', {
  event_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  event_type: { type: DataTypes.STRING, allowNull: false },
  event_name: { type: DataTypes.STRING, allowNull: false },
  event_date: { type: DataTypes.DATEONLY, allowNull: false },
}, {
  indexes: [
    {
      unique: true,
      fields: ['event_type', 'event_name']
    }
  ]
});

export const Registration = sequelize.define('registration', {
  reg_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  employee_no: { type: DataTypes.STRING },
  employee_name: { type: DataTypes.STRING },
  department: { type: DataTypes.STRING },
  event_id: { type: DataTypes.INTEGER, allowNull: false },
});

export const Attendance = sequelize.define('attendance', {
  attendance_id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  employee_no: { type: DataTypes.STRING },
  employee_name: { type: DataTypes.STRING },
  department: { type: DataTypes.STRING },
  mode_of_attendance: { type: DataTypes.ENUM('Virtual', 'Onsite'), allowNull: false },
  validation_status: { type: DataTypes.ENUM('Registered', 'Not Registered'), defaultValue: 'Not Registered' },
  event_id: { type: DataTypes.INTEGER, allowNull: false },
});

export function registerModels() {
  Registration.belongsTo(Event, { foreignKey: 'event_id' });
  Event.hasMany(Registration, { foreignKey: 'event_id' });

  Attendance.belongsTo(Event, { foreignKey: 'event_id' });
  Event.hasMany(Attendance, { foreignKey: 'event_id' });
}

export async function syncDb() {
  await sequelize.sync();
}
`

attendance.routes.js
`
import { Router } from 'express';
import multer from 'multer';
import XLSX from 'xlsx';
import { body, validationResult } from 'express-validator';
import { Attendance, Registration, Event } from '../../core/models.js';
import { sequelize } from '../../core/db.js';
import { Op } from 'sequelize';
import { requireAuth } from '../_shared/auth-middleware.js';

const upload = multer({ storage: multer.memoryStorage() });
export const attendanceRouter = Router();

async function computeValidationStatus(employeeNo, eventId) {
  if (!employeeNo || employeeNo === 'NA') return 'Not Registered'; // 'NA' or null can't be registered
  const employeeNoStr = String(employeeNo);
  const match = await Registration.findOne({ 
    where: { 
      employee_no: employeeNoStr, 
      event_id: eventId 
    } 
  });
  return match ? 'Registered' : 'Not Registered';
}

attendanceRouter.get('/', requireAuth, async (req, res, next) => {
  try {
    const { 
      page = 1, 
      limit = 10, 
      sort = 'attendance_id', 
      order = 'DESC', 
      event_id,
      employee_no,
      employee_name,
      department,
      event_name
    } = req.query;
    const offset = (page - 1) * limit;
    
    const where = {};
    if (event_id) where.event_id = event_id;
    if (employee_no) {
      where.employee_no = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('employee_no')),
        { [Op.like]: `%${employee_no.toLowerCase()}%` }
      );
    }
    if (employee_name) {
      where.employee_name = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('employee_name')),
        { [Op.like]: `%${employee_name.toLowerCase()}%` }
      );
    }
    if (department) {
      where.department = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('department')),
        { [Op.like]: `%${department.toLowerCase()}%` }
      );
    }

    const includeWhere = {};
    if (event_name) {
      includeWhere.event_name = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('event_name')),
        { [Op.like]: `%${event_name.toLowerCase()}%` }
      );
    }
    
    const { count, rows } = await Attendance.findAndCountAll({
      where,
      include: [{
        model: Event,
        where: Object.keys(includeWhere).length > 0 ? includeWhere : undefined,
        required: Object.keys(includeWhere).length > 0
      }],
      order: [[sort, order.toUpperCase()]],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });
    
    res.json({
      attendance: rows,
      pagination: {
        total: count,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(count / limit)
      }
    });
  } catch (e) {
    console.error('GET /attendance error:', e);
    next(e);
  }
});

attendanceRouter.post(
  '/',
  requireAuth,
  [
    body('employee_no').optional().trim(),  // Relaxed for empty/NA
    body('employee_name').optional().isString().trim(),
    body('department').optional().isString().trim(),
    body('mode_of_attendance').isIn(['Virtual', 'Onsite']).withMessage('Mode must be Virtual or Onsite'),
    body('event_name').isString().notEmpty().trim().withMessage('Event Name is required'),
  ],
  async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        console.error('POST /attendance validation errors:', errors.array());
        return res.status(400).json({ error: 'Validation failed', details: errors.array() });
      }
      
      const { event_name, employee_no, employee_name: empName, ...rest } = req.body;
      const event = await Event.findOne({ where: { event_name: { [Op.iLike]: event_name } } });
      if (!event) {
        console.error(`POST /attendance: Event "${event_name}" not found`);
        return res.status(404).json({ error: `Event "${event_name}" not found`, details: `Event "${event_name}" does not exist` });
      }
      
      // Handle empty employee_no â†’ 'NA'
      const finalEmployeeNo = (employee_no === '' || employee_no === undefined || employee_no === null) ? 'NA' : employee_no.trim();
      
      // Conditional duplicate check
      let existingAttendance;
      if (finalEmployeeNo === 'NA') {
        if (!empName?.trim()) {
          return res.status(400).json({ error: 'Employee Name required for walk-in attendance' });
        }
        existingAttendance = await Attendance.findOne({
          where: {
            employee_no: 'NA',
            event_id: event.event_id,
            employee_name: { [Op.iLike]: empName.trim() }
          }
        });
      } else {
        existingAttendance = await Attendance.findOne({
          where: {
            employee_no: finalEmployeeNo,
            event_id: event.event_id
          }
        });
      }
      
      if (existingAttendance) {
        console.warn(`POST /attendance: Duplicate found for employee ${finalEmployeeNo || 'NULL'} in event ${event_name}`);
        return res.status(409).json({ 
          error: 'Duplicate attendance found', 
          details: finalEmployeeNo === 'NA' 
            ? `Employee "${empName.trim()}" already has attendance for "${event_name}"` 
            : `Employee ${finalEmployeeNo} already has attendance for "${event_name}"` 
        });
      }
      
      const validation_status = await computeValidationStatus(finalEmployeeNo, event.event_id);
      const created = await Attendance.create({ 
        ...rest, 
        employee_no: finalEmployeeNo, 
        employee_name: empName?.trim() || null,
        event_id: event.event_id, 
        validation_status 
      });
      res.status(201).json(created);
    } catch (e) {
      console.error('POST /attendance error:', e);
      next(e);
    }
  }
);

attendanceRouter.put(
  '/:id',
  requireAuth,
  [
    body('employee_no').optional().trim(),
    body('employee_name').optional().isString().trim(),
    body('department').optional().isString().trim(),
    body('mode_of_attendance').isIn(['Virtual', 'Onsite']),
    body('event_name').optional().isString().trim(),
  ],
  async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        console.error('PUT /attendance/:id validation errors:', errors.array());
        return res.status(400).json({ error: 'Validation failed', details: errors.array() });
      }
      const id = parseInt(req.params.id, 10);
      if (isNaN(id)) {
        return res.status(400).json({ error: 'Invalid ID', details: 'Attendance ID must be a number' });
      }
      const attendance = await Attendance.findByPk(id);
      if (!attendance) {
        console.error(`PUT /attendance/${id}: Attendance not found`);
        return res.status(404).json({ error: 'Attendance record not found', details: `ID ${id} does not exist` });
      }
      
      const { event_name, employee_no, employee_name: empName, ...rest } = req.body;
      let event_id = attendance.event_id;
      if (event_name) {
        const event = await Event.findOne({ where: { event_name: { [Op.iLike]: event_name } } });
        if (!event) {
          console.error(`PUT /attendance/${id}: Event "${event_name}" not found`);
          return res.status(404).json({ error: 'Event not found', details: `Event "${event_name}" does not exist` });
        }
        event_id = event.event_id;
      }
      
      // Handle empty employee_no â†’ 'NA'
      const finalEmployeeNo = (employee_no === '' || employee_no === undefined || employee_no === null) ? 'NA' : employee_no.trim();
      
      // Conditional duplicate check (excluding current)
      let existingAttendance;
      if (finalEmployeeNo === 'NA') {
        if (!empName?.trim()) {
          return res.status(400).json({ error: 'Employee Name required for walk-in attendance' });
        }
        existingAttendance = await Attendance.findOne({
          where: {
            employee_no: 'NA',
            event_id,
            employee_name: { [Op.iLike]: empName.trim() },
            attendance_id: { [Op.ne]: id }
          }
        });
      } else {
        existingAttendance = await Attendance.findOne({
          where: {
            employee_no: finalEmployeeNo,
            event_id,
            attendance_id: { [Op.ne]: id }
          }
        });
      }
      
      if (existingAttendance) {
        return res.status(409).json({ 
          error: 'Duplicate attendance found', 
          details: finalEmployeeNo === 'NA' 
            ? `Employee "${empName.trim()}" already has attendance for this event` 
            : `Employee ${finalEmployeeNo} already has attendance for this event` 
        });
      }
      
      const validation_status = await computeValidationStatus(finalEmployeeNo, event_id);
      await attendance.update({ 
        ...rest, 
        employee_no: finalEmployeeNo, 
        employee_name: empName?.trim() || null,
        event_id, 
        validation_status 
      });
      res.json(attendance);
    } catch (e) {
      console.error(`PUT /attendance/${req.params.id} error:`, e);
      next(e);
    }
  }
);

attendanceRouter.delete('/:id', requireAuth, async (req, res, next) => {
  try {
    const id = parseInt(req.params.id, 10);
    if (isNaN(id)) {
      return res.status(400).json({ error: 'Invalid ID', details: 'Attendance ID must be a number' });
    }
    const attendance = await Attendance.findByPk(id);
    if (!attendance) {
      console.error(`DELETE /attendance/${id}: Attendance not found`);
      return res.status(404).json({ error: 'Attendance record not found', details: `ID ${id} does not exist` });
    }
    await attendance.destroy();
    res.json({ message: 'Attendance record deleted successfully' });
  } catch (e) {
    console.error(`DELETE /attendance/${req.params.id} error:`, e);
    next(e);
  }
});

attendanceRouter.post('/upload', requireAuth, upload.single('file'), async (req, res, next) => {
  try {
    const { buffer } = req.file || {};
    if (!buffer) {
      console.error('POST /attendance/upload: No file uploaded');
      return res.status(400).json({ error: 'No file uploaded', details: 'Please select a valid Excel/CSV file' });
    }
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet, { defval: '' });
    const created = [];
    const skipped = [];
    
    const seen = new Map();
    
    for (const row of rows) {
      let employee_no = row['Employee No']?.toString().trim();
      const rawEmployeeName = row['Employee Name']?.toString().trim();
      const event_name = row['Event Name']?.toString().trim();
      const mode_of_attendance = row['Mode of Attendance']?.toString().trim() || 'Virtual';
      
      if (!event_name) {
        skipped.push({ ...row, reason: 'Missing Event Name' });
        console.warn('Upload skipping row: Missing Event Name');
        continue;
      }
      if (!['Virtual', 'Onsite'].includes(mode_of_attendance)) {
        skipped.push({ ...row, reason: `Invalid Mode of Attendance "${mode_of_attendance}"` });
        console.warn(`Upload skipping row: Invalid Mode of Attendance "${mode_of_attendance}"`);
        continue;
      }
      
      const event = await Event.findOne({ where: { event_name: { [Op.iLike]: event_name } } });
      if (!event) {
        skipped.push({ ...row, reason: `Event "${event_name}" not found` });
        console.warn(`Upload skipping row: Event "${event_name}" not found`);
        continue;
      }
      
      // Handle empty employee_no â†’ 'NA'
      const finalEmployeeNo = (employee_no === '' || !employee_no) ? 'NA' : employee_no;
      
      // Conditional duplicate key
      let key;
      if (finalEmployeeNo === 'NA') {
        if (!rawEmployeeName) {
          skipped.push({ ...row, reason: 'Employee Name required for walk-in (no Employee No)' });
          console.warn(`Upload skipping row: Missing Employee Name for walk-in`);
          continue;
        }
        key = `NA_${event.event_id}_${rawEmployeeName.toLowerCase()}`;
      } else {
        key = `${finalEmployeeNo}_${event.event_id}`;
      }
      
      if (seen.has(key)) {
        const reason = finalEmployeeNo === 'NA' 
          ? `Duplicate walk-in "${rawEmployeeName}" for event "${event_name}"`
          : `Duplicate employee "${finalEmployeeNo}" for event "${event_name}"`;
        skipped.push({ ...row, reason });
        console.warn(`Upload skipping duplicate: ${key}`);
        continue;
      }
      seen.set(key, true);
      
      const validation_status = await computeValidationStatus(finalEmployeeNo, event.event_id);
      const record = await Attendance.create({
        employee_no: finalEmployeeNo,
        employee_name: rawEmployeeName || null,
        department: row['Department']?.toString().trim() || null,
        mode_of_attendance,
        event_id: event.event_id,
        validation_status,
      });
      created.push(record);
    }
    
    const response = { inserted: created.length };
    if (skipped.length > 0) {
      response.skipped = skipped.length;
      response.skip_details = skipped; // For debugging
    }
    console.log(`Upload completed: ${response.inserted} inserted, ${response.skipped || 0} skipped`);
    res.json(response);
  } catch (e) {
    console.error('POST /attendance/upload error:', e);
    next(e);
  }
});

// New endpoint for departments autocomplete
attendanceRouter.get('/departments', requireAuth, async (req, res, next) => {
  try {
    const departments = await sequelize.query(
      `SELECT DISTINCT department as department FROM dmags WHERE department IS NOT NULL ORDER BY department`,
      { type: sequelize.QueryTypes.SELECT }
    );
    res.json(departments.map(d => d.department).filter(Boolean));
  } catch (e) {
    console.error('GET /attendance/departments error:', e);
    next(e);
  }
});
`


auth.routes.js
`
import { Router } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { body, validationResult } from 'express-validator';
import { Admin } from '../../core/models.js';

export const authRouter = Router();

authRouter.post(
  '/login',
  [body('username').isString().notEmpty(), body('password').isString().notEmpty()],
  async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }
      const { username, password } = req.body;
      const admin = await Admin.findOne({ where: { username } });
      if (!admin) return res.status(401).json({ error: 'Invalid credentials' });
      const ok = await bcrypt.compare(password, admin.password_hash);
      if (!ok) return res.status(401).json({ error: 'Invalid credentials' });
      const token = jwt.sign({ sub: admin.admin_id, username }, process.env.JWT_SECRET || 'dev_secret', { expiresIn: '8h' });
      res.json({ token });
    } catch (e) {
      next(e);
    }
  }
);



`

events.routes.js
`
import { Router } from 'express';
import multer from 'multer';
import XLSX from 'xlsx';
import { body, validationResult } from 'express-validator';
import { sequelize } from '../../core/db.js';
import { Event } from '../../core/models.js';
import { requireAuth } from '../_shared/auth-middleware.js';
import { Op } from 'sequelize';

const upload = multer({ storage: multer.memoryStorage() });
export const eventsRouter = Router();

eventsRouter.get('/', requireAuth, async (req, res, next) => {
  try {
    const { 
      page = 1, 
      limit = 10, 
      sort = 'event_id', 
      order = 'DESC', 
      type,
      name,
      date,
      search  // New: unified search param
    } = req.query;
    const offset = (Number(page) - 1) * Number(limit);
    
    const where = {};
    
    // Handle separate filters
    if (type) where.event_type = { [Op.like]: `%${type}%` };
    if (name) where.event_name = { [Op.like]: `%${name}%` };
    if (date) where.event_date = { [Op.eq]: date };
    
    // Handle unified search: OR across name and type (case-insensitive)
    if (search) {
      where[Op.or] = [
        { event_name: { [Op.iLike]: `%${search}%` } },
        { event_type: { [Op.iLike]: `%${search}%` } }
      ];
      console.log(`Search query: "${search}" (filtered ${res.locals.eventCount || 'N/A'} events)`); // Optional logging
    }
    
    const { count, rows } = await Event.findAndCountAll({
      where,
      order: [[sort, order.toUpperCase()]],
      limit: Number(limit),
      offset
    });
    
    res.json({
      events: rows,
      pagination: {
        total: count,
        page: Number(page),
        limit: Number(limit),
        totalPages: Math.ceil(count / limit)
      }
    });
  } catch (e) {
    console.error('GET /events error:', e);
    next(e);
  }
});

// Deprecated: Use GET /?search= instead (remove in v2)
eventsRouter.get('/search', requireAuth, async (req, res, next) => {
  try {
    const { type, name } = req.query;
    const where = {};
    if (type) where.event_type = { [Op.like]: `%${type}%` };
    if (name) where.event_name = { [Op.like]: `%${name}%` };
    const events = await Event.findAll({ where, order: [['event_name', 'ASC']], raw: true });
    res.json(events.map(e => ({ id: e.event_id, label: `${e.event_type}: ${e.event_name}` })));
  } catch (e) {
    next(e);
  }
});

eventsRouter.post(
  '/',
  requireAuth,
  [
    body('event_type').isString().notEmpty().trim(),
    body('event_name').isString().notEmpty().trim(),
    body('event_date').isDate({ format: 'YYYY-MM-DD' }),
  ],
  async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) return res.status(400).json({ error: 'Validation failed', details: errors.array() });
      
      // Check for duplicate event
      const existingEvent = await Event.findOne({
        where: {
          event_type: req.body.event_type.trim(),
          event_name: req.body.event_name.trim()
        }
      });
      
      if (existingEvent) {
        return res.status(409).json({ 
          error: 'Duplicate event found', 
          details: `Event "${req.body.event_name.trim()}" of type "${req.body.event_type.trim()}" already exists` 
        });
      }
      
      const created = await Event.create({
        event_type: req.body.event_type.trim(),
        event_name: req.body.event_name.trim(),
        event_date: req.body.event_date
      });
      res.status(201).json(created);
    } catch (e) {
      if (e.name === 'SequelizeUniqueConstraintError') {
        return res.status(409).json({ 
          error: 'Duplicate event found', 
          details: 'Event type and name combination must be unique' 
        });
      }
      next(e);
    }
  }
);

eventsRouter.put(
  '/:id',
  requireAuth,
  [
    body('event_type').optional().isString().trim(),
    body('event_name').optional().isString().trim(),
    body('event_date').optional().isDate({ format: 'YYYY-MM-DD' }),
  ],
  async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) return res.status(400).json({ error: 'Validation failed', details: errors.array() });
      const event = await Event.findByPk(req.params.id);
      if (!event) return res.status(404).json({ error: 'Event not found' });
      
      const updateData = {
        event_type: req.body.event_type ? req.body.event_type.trim() : event.event_type,
        event_name: req.body.event_name ? req.body.event_name.trim() : event.event_name,
        ...(req.body.event_date && { event_date: req.body.event_date })
      };
      
      // Check for duplicate (excluding current)
      const existingEvent = await Event.findOne({
        where: {
          event_type: updateData.event_type,
          event_name: updateData.event_name,
          event_id: { [Op.ne]: req.params.id }
        }
      });
      
      if (existingEvent) {
        return res.status(409).json({ 
          error: 'Duplicate event found', 
          details: `Event "${updateData.event_name}" of type "${updateData.event_type}" already exists` 
        });
      }
      
      await event.update(updateData);
      res.json(event);
    } catch (e) {
      next(e);
    }
  }
);

eventsRouter.delete('/:id', requireAuth, async (req, res, next) => {
  try {
    const event = await Event.findByPk(req.params.id);
    if (!event) return res.status(404).json({ error: 'Event not found' });
    await event.destroy();
    res.json({ message: 'Event deleted successfully' });
  } catch (e) {
    next(e);
  }
});

// Helper to parse Excel/CSV dates (handles string, number, empty)
function parseExcelDate(cell) {
  if (!cell || cell === '') return null;  // Explicit null for invalid/empty

  if (typeof cell === 'string') {
    const trimmed = cell.trim();
    const d = new Date(trimmed);
    if (!isNaN(d.getTime()) && d.getFullYear() > 1900) {
      return d.toISOString().split('T')[0];  // YYYY-MM-DD
    }
    // Manual parse for MM/DD/YYYY or DD-MM-YYYY
    const parts = trimmed.split(/[-\/]/);
    if (parts.length === 3) {
      const nums = parts.map(p => parseInt(p.trim(), 10));
      if (!isNaN(nums[0]) && !isNaN(nums[1]) && !isNaN(nums[2])) {
        // Guess format: if first part > 12, assume YYYY; else MM/DD/YYYY
        if (nums[0] > 31) {  // Likely YYYY
          return `${nums[0]}-${String(nums[1]).padStart(2, '0')}-${String(nums[2]).padStart(2, '0')}`;
        } else {
          return `${nums[2]}-${String(nums[0]).padStart(2, '0')}-${String(nums[1]).padStart(2, '0')}`;
        }
      }
    }
  } else if (typeof cell === 'number' && cell > 25569) {  // Excel serial date (post-1900)
    const utc_days = Math.floor(cell - 25569);
    const utc_value = utc_days * 86400;
    const date_info = new Date(utc_value * 1000);
    return `${date_info.getUTCFullYear()}-${String(date_info.getUTCMonth() + 1).padStart(2, '0')}-${String(date_info.getUTCDate()).padStart(2, '0')}`;
  }

  return null;  // Invalid
}

eventsRouter.post('/upload', requireAuth, upload.single('file'), async (req, res, next) => {
  try {
    const { buffer } = req.file || {};
    if (!buffer) return res.status(400).json({ error: 'No file uploaded' });
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet, { defval: '' });
    const created = [];
    const skipped = [];
    for (const row of rows) {
      const event_type = (row['Event Type'] || '').trim();
      const event_name = (row['Event Name'] || '').trim();
      const event_date_raw = row['Event Date'];
      const event_date = parseExcelDate(event_date_raw);

      // Skip if required fields missing/invalid
      let reason = '';
      if (!event_type) reason = 'Missing event type';
      else if (!event_name) reason = 'Missing event name';
      else if (!event_date) reason = 'Invalid event date';
      if (reason) {
        skipped.push({
          event_type,
          event_name,
          reason,  // Descriptive reason
          date_raw: event_date_raw  // For debugging
        });
        console.warn(`Skipping invalid row: ${reason} - ${event_type} - ${event_name} (${event_date_raw})`);
        continue;
      }

      // Check for duplicate before create
      const existing = await Event.findOne({
        where: {
          event_type,
          event_name
        }
      });
      if (existing) {
        skipped.push({
          event_type,
          event_name,
          reason: `Duplicate event "${event_name}" of type "${event_type}"`
        });
        console.warn(`Skipping duplicate: ${event_type} - ${event_name}`);
        continue;
      }

      const record = await Event.create({
        event_type,
        event_name,
        event_date
      });
      created.push(record);
    }
    const response = { inserted: created.length };
    if (skipped.length > 0) {
      response.skipped = skipped.length;
      response.skip_details = skipped;  // Includes event_name, event_type, reason for frontend display
    }
    res.json(response);
  } catch (e) {
    if (e.name === 'SequelizeUniqueConstraintError') {
      return res.status(409).json({ 
        error: 'Duplicate event found', 
        details: 'One or more records violate unique constraints on type/name' 
      });
    }
    console.error('POST /events/upload error:', e);
    next(e);
  }
});`

registration.routes.js

`
import { Router } from 'express';
import multer from 'multer';
import XLSX from 'xlsx';
import { body, validationResult } from 'express-validator';
import { Registration, Event } from '../../core/models.js';
import { sequelize } from '../../core/db.js';
import { requireAuth } from '../_shared/auth-middleware.js';
import { Op } from 'sequelize';

const upload = multer({ storage: multer.memoryStorage() });
export const registrationsRouter = Router();

registrationsRouter.get('/', requireAuth, async (req, res, next) => {
  try {
    const { 
      page = 1, 
      limit = 10, 
      sort = 'reg_id', 
      order = 'DESC', 
      event_id,
      employee_no,
      employee_name,
      department,
      event_name
    } = req.query;
    const offset = (page - 1) * limit;
    
    const where = {};
    if (event_id) where.event_id = event_id;
    if (employee_no) {
      where.employee_no = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('employee_no')),
        { [Op.like]: `%${employee_no.toLowerCase()}%` }
      );
    }
    if (employee_name) {
      where.employee_name = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('employee_name')),
        { [Op.like]: `%${employee_name.toLowerCase()}%` }
      );
    }
    if (department) {
      where.department = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('department')),
        { [Op.like]: `%${department.toLowerCase()}%` }
      );
    }
    
    const includeWhere = {};
    if (event_name) {
      includeWhere.event_name = sequelize.where(
        sequelize.fn('LOWER', sequelize.col('event_name')),
        { [Op.like]: `%${event_name.toLowerCase()}%` }
      );
    }
    
    const { count, rows } = await Registration.findAndCountAll({
      where,
      include: [{
        model: Event,
        where: Object.keys(includeWhere).length > 0 ? includeWhere : undefined,
        required: Object.keys(includeWhere).length > 0
      }],
      order: [[sort, order.toUpperCase()]],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });
    
    res.json({
      registrations: rows,
      pagination: {
        total: count,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(count / limit)
      }
    });
  } catch (e) {
    console.error('GET /registrations error:', e);
    next(e);
  }
});

registrationsRouter.post(
  '/',
  requireAuth,
  [
    body('employee_no').optional().trim(),  // Allow empty/undefined; handle in code
    body('employee_name').optional().isString().trim(),
    body('department').optional().isString().trim(),
    body('event_name').isString().notEmpty().trim(),
  ],
  async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        console.error('POST /registrations validation errors:', errors.array());
        return res.status(400).json({ error: 'Validation failed', details: errors.array() });
      }
      
      const { event_name, employee_no, ...rest } = req.body;
      const event = await Event.findOne({ where: { event_name } });
      if (!event) {
        console.error(`POST /registrations: Event "${event_name}" not found`);
        return res.status(404).json({ error: 'Event not found', details: `Event "${event_name}" does not exist` });
      }
      
      const finalEmployeeNo = (employee_no === '' || employee_no === undefined || employee_no === null) ? 'NA' : employee_no.trim();

      // Conditional duplicate check
      let existingRegistration;
      if (finalEmployeeNo === 'NA') {
        // For NA: Check employee_name + event_id (case-insensitive)
        existingRegistration = await Registration.findOne({
          where: {
            employee_no: 'NA',
            event_id: event.event_id,
            employee_name: { [Op.iLike]: rest.employee_name?.trim() || '' }  // Assumes employee_name in rest
          }
        });
      } else {
        // For actual employee_no: Standard check
        existingRegistration = await Registration.findOne({
          where: {
            employee_no: finalEmployeeNo,
            event_id: event.event_id
          }
        });
      }

      if (existingRegistration) {
        return res.status(409).json({ 
          error: 'Duplicate registration found', 
          details: finalEmployeeNo === 'NA' 
            ? `Employee "${rest.employee_name?.trim() || 'unknown'}" is already registered for this event` 
            : `Employee ${finalEmployeeNo} is already registered for this event` 
        });
      }
      
      const created = await Registration.create({
        ...rest,
        employee_no: finalEmployeeNo,
        event_id: event.event_id
      });
      res.status(201).json(created);
    } catch (e) {
      console.error('POST /registrations error:', e);
      next(e);
    }
  }
);

// PUT validation and logic (similar changes)
registrationsRouter.put(
  '/:id',
  requireAuth,
  [
    body('employee_no').optional().trim(),  // Allow empty/undefined
    body('employee_name').optional().isString().trim(),
    body('department').optional().isString().trim(),
    body('event_name').optional().isString().trim(),
  ],
  async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        console.error('PUT /registrations/:id validation errors:', errors.array());
        return res.status(400).json({ error: 'Validation failed', details: errors.array() });
      }
      const id = parseInt(req.params.id, 10);  // Parse to int to avoid Op.ne issues
      if (isNaN(id)) {
        return res.status(400).json({ error: 'Invalid ID', details: 'Registration ID must be a number' });
      }
      const registration = await Registration.findByPk(id);
      if (!registration) {
        console.error(`PUT /registrations/${id}: Registration not found`);
        return res.status(404).json({ error: 'Registration not found', details: `ID ${id} does not exist` });
      }
      
      const { event_name, employee_no, ...rest } = req.body;
      let event_id = registration.event_id;
      if (event_name) {
        const event = await Event.findOne({ where: { event_name } });
        if (!event) {
          console.error(`PUT /registrations/${id}: Event "${event_name}" not found`);
          return res.status(404).json({ error: 'Event not found', details: `Event "${event_name}" does not exist` });
        }
        event_id = event.event_id;
      }
      
      const finalEmployeeNo = (employee_no === '' || employee_no === undefined || employee_no === null) ? 'NA' : employee_no.trim();

      // Conditional duplicate check
      let existingRegistration;
      if (finalEmployeeNo === 'NA') {
        // For NA: Check employee_name + event_id (case-insensitive)
        existingRegistration = await Registration.findOne({
          where: {
            employee_no: 'NA',
            event_id: event.event_id,
            employee_name: { [Op.iLike]: rest.employee_name?.trim() || '' }  // Assumes employee_name in rest
          }
        });
      } else {
        // For actual employee_no: Standard check
        existingRegistration = await Registration.findOne({
          where: {
            employee_no: finalEmployeeNo,
            event_id: event.event_id
          }
        });
      }

      if (existingRegistration) {
        return res.status(409).json({ 
          error: 'Duplicate registration found', 
          details: finalEmployeeNo === 'NA' 
            ? `Employee "${rest.employee_name?.trim() || 'unknown'}" is already registered for this event` 
            : `Employee ${finalEmployeeNo} is already registered for this event` 
        });
      }
      
      await registration.update({ ...rest, employee_no: finalEmployeeNo, event_id });
      res.json(registration);
    } catch (e) {
      console.error(`PUT /registrations/${req.params.id} error:`, e);
      next(e);
    }
  }
);

registrationsRouter.delete('/:id', requireAuth, async (req, res, next) => {
  try {
    const registration = await Registration.findByPk(req.params.id);
    if (!registration) {
      console.error(`DELETE /registrations/${req.params.id}: Registration not found`);
      return res.status(404).json({ error: 'Registration not found', details: `ID ${req.params.id} does not exist` });
    }
    await registration.destroy();
    res.json({ message: 'Registration deleted successfully' });
  } catch (e) {
    console.error(`DELETE /registrations/${req.params.id} error:`, e);
    next(e);
  }
});

registrationsRouter.post('/upload', requireAuth, upload.single('file'), async (req, res, next) => {
  try {
    const { buffer } = req.file || {};
    if (!buffer) {
      console.error('POST /registrations/upload: No file uploaded');
      return res.status(400).json({ error: 'No file uploaded', details: 'Please select a valid Excel/CSV file' });
    }
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet, { defval: '' });
    const created = [];
    const skipped = [];
    
    // Track unique keys conditionally
    const seen = new Map();
    
    for (const row of rows) {
      let employee_no = row['Employee No']?.toString().trim();
      const rawEmployeeName = row['Employee Name']?.toString().trim();
      const event_name = row['Event Name']?.toString().trim();
      
      if (!event_name) {
        skipped.push({ ...row, reason: 'Missing Event Name' });
        console.warn(`Upload skipping row: Missing Event Name`);
        continue;
      }
      
      const event = await Event.findOne({ where: { event_name } });
      if (!event) {
        skipped.push({ ...row, reason: `Event "${event_name}" not found` });
        console.warn(`Upload skipping row: Event "${event_name}" not found`);
        continue;
      }
      
      // Handle empty employee_no â†’ 'NA'
      const finalEmployeeNo = (employee_no === '' || !employee_no) ? 'NA' : employee_no;
      
      // Conditional duplicate key
      let key;
      if (finalEmployeeNo === 'NA') {
        if (!rawEmployeeName) {
          skipped.push({ ...row, reason: 'Employee Name required for walk-in (no Employee No)' });
          console.warn(`Upload skipping row: Missing Employee Name for walk-in`);
          continue;
        }
        key = `NA_${event.event_id}_${rawEmployeeName.toLowerCase()}`;
      } else {
        key = `${finalEmployeeNo}_${event.event_id}`;
      }
      
      if (seen.has(key)) {
        const reason = finalEmployeeNo === 'NA' 
          ? `Duplicate walk-in "${rawEmployeeName}" for event "${event_name}"`
          : `Duplicate employee "${finalEmployeeNo}" for event "${event_name}"`;
        skipped.push({ ...row, reason });
        console.warn(`Upload skipping duplicate: ${key}`);
        continue;
      }
      seen.set(key, true);
      
      const record = await Registration.create({
        employee_no: finalEmployeeNo,
        employee_name: rawEmployeeName || null,
        department: row['Department']?.toString().trim() || null,
        event_id: event.event_id,
      });
      created.push(record);
    }
    
    const response = { inserted: created.length };
    if (skipped.length > 0) {
      response.skipped = skipped.length;
      response.skip_details = skipped; // For debugging; remove in production if sensitive
    }
    console.log(`Upload completed: ${response.inserted} inserted, ${response.skipped || 0} skipped`);
    res.json(response);
  } catch (e) {
    console.error('POST /registrations/upload error:', e);
    next(e);
  }
});


// Add after the existing routes
registrationsRouter.get('/departments', requireAuth, async (req, res, next) => {
  try {
    const departments = await sequelize.query(
      `SELECT DISTINCT department as department FROM dmags WHERE department IS NOT NULL ORDER BY department`,
      { type: sequelize.QueryTypes.SELECT }
    );
    res.json(departments.map(d => d.department).filter(Boolean));
  } catch (e) {
    console.error('GET /registrations/departments error:', e);
    next(e);
  }
});

`

cleanup-duplicates.js
`
import { sequelize } from '../core/db.js';
import { Registration, Attendance, Event } from '../core/models.js';

export async function cleanupDuplicates() {
  try {
    console.log('Starting duplicate cleanup...');
    
    // Clean up duplicate registrations
    console.log('Cleaning up duplicate registrations...');
    const duplicateRegistrations = await sequelize.query(`
      SELECT employee_no, event_id, COUNT(*) as count
      FROM registrations 
      WHERE employee_no IS NOT NULL
      GROUP BY employee_no, event_id 
      HAVING COUNT(*) > 1
    `, { type: sequelize.QueryTypes.SELECT });

    for (const duplicate of duplicateRegistrations) {
      console.log(`Found ${duplicate.count} duplicates for employee ${duplicate.employee_no} in event ${duplicate.event_id}`);
      
      // Keep only the first record, delete the rest
      const records = await Registration.findAll({
        where: {
          employee_no: duplicate.employee_no,
          event_id: duplicate.event_id
        },
        order: [['reg_id', 'ASC']]
      });
      
      // Delete all but the first record
      for (let i = 1; i < records.length; i++) {
        await records[i].destroy();
        console.log(`Deleted duplicate registration ID: ${records[i].reg_id}`);
      }
    }

    // Clean up duplicate attendance
    console.log('Cleaning up duplicate attendance...');
    const duplicateAttendance = await sequelize.query(`
      SELECT employee_no, event_id, COUNT(*) as count
      FROM attendance 
      WHERE employee_no IS NOT NULL
      GROUP BY employee_no, event_id 
      HAVING COUNT(*) > 1
    `, { type: sequelize.QueryTypes.SELECT });

    for (const duplicate of duplicateAttendance) {
      console.log(`Found ${duplicate.count} duplicates for employee ${duplicate.employee_no} in event ${duplicate.event_id}`);
      
      // Keep only the first record, delete the rest
      const records = await Attendance.findAll({
        where: {
          employee_no: duplicate.employee_no,
          event_id: duplicate.event_id
        },
        order: [['attendance_id', 'ASC']]
      });
      
      // Delete all but the first record
      for (let i = 1; i < records.length; i++) {
        await records[i].destroy();
        console.log(`Deleted duplicate attendance ID: ${records[i].attendance_id}`);
      }
    }

    console.log('Duplicate cleanup completed successfully!');
    
    // Now add the unique constraints
    console.log('Adding unique constraints...');
    
    try {
      await sequelize.query(`
        ALTER TABLE registrations 
        ADD UNIQUE INDEX registrations_employee_no_event_id (employee_no, event_id)
      `);
      console.log('Added unique constraint for registrations');
    } catch (error) {
      if (error.code === 'ER_DUP_KEYNAME') {
        console.log('Unique constraint for registrations already exists');
      } else {
        throw error;
      }
    }

    try {
      await sequelize.query(`
        ALTER TABLE attendance 
        ADD UNIQUE INDEX attendance_employee_no_event_id (employee_no, event_id)
      `);
      console.log('Added unique constraint for attendance');
    } catch (error) {
      if (error.code === 'ER_DUP_KEYNAME') {
        console.log('Unique constraint for attendance already exists');
      } else {
        throw error;
      }
    }

    try {
      await sequelize.query(`
        ALTER TABLE events 
        ADD UNIQUE INDEX events_type_name (event_type, event_name)
      `);
      console.log('Added unique constraint for events');
    } catch (error) {
      if (error.code === 'ER_DUP_KEYNAME') {
        console.log('Unique constraint for events already exists');
      } else {
        throw error;
      }
    }

    console.log('All unique constraints added successfully!');
    
  } catch (error) {
    console.error('Error during cleanup:', error);
    throw error;
  }
}

// Run cleanup if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  cleanupDuplicates()
    .then(() => {
      console.log('Migration completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Migration failed:', error);
      process.exit(1);
    });
}

`

employees.routes.js
`
import { Router } from 'express';
import { body, validationResult } from 'express-validator';
import { Dmag } from '../../core/models.js';
import { requireAuth } from '../_shared/auth-middleware.js';

export const employeesRouter = Router();

employeesRouter.get('/by-number/:employee_no', requireAuth, async (req, res, next) => {
  try {
    const employee = await Dmag.findOne({ where: { employee_no: req.params.employee_no } });
    if (!employee) return res.status(404).json({ error: 'Employee not found' });
    res.json({ employee_no: employee.employee_no, employee_name: employee.employee_name, department: employee.department });
  } catch (e) {
    next(e);
  }
});

employeesRouter.get('/departments', requireAuth, async (req, res, next) => {
  try {
    const { getUniqueDepartments } = await import('../../core/models.js');
    const departments = await getUniqueDepartments();
    res.json(departments.map(d => d.department));
  } catch (e) {
    next(e);
  }
});
`
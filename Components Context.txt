Components Context:

SearchInput.tsx
`
import { useState, useEffect } from 'react';
import { MagnifyingGlassIcon } from '@heroicons/react/24/outline';

type Props = {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  debounceMs?: number;
};

export function SearchInput({ value, onChange, placeholder = "Search...", debounceMs = 300 }: Props) {
  const [localValue, setLocalValue] = useState(value);

  useEffect(() => {
    const timer = setTimeout(() => onChange(localValue), debounceMs);
    return () => clearTimeout(timer);
  }, [localValue, debounceMs, onChange]);

  return (
    <div className="relative">
      <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
        <input
          type="text"
          placeholder={placeholder}
          value={localValue}
          onChange={(e) => setLocalValue(e.target.value)}

          className="pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 w-64 text-sm transition-colors"
        />
    </div>
  );
}
`

EventFilterDropdown.tsx
`
import { useEffect, useState } from 'react';
import { api } from '../services/api';
import { toast } from 'react-hot-toast';

type Event = { event_id: number; event_name: string };
type Props = {
  selectedEventId: number;
  onChange: (id: number) => void;
};

export function EventFilterDropdown({ selectedEventId, onChange }: Props) {
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    api.get('/events/all')
      .then(res => setEvents(res.data.events || []))
      .catch(() => toast.error('Failed to load events'))
      .finally(() => setLoading(false));
  }, []);

  return (
    <select
      value={selectedEventId}
      onChange={(e) => onChange(Number(e.target.value))}
      disabled={loading}
      className="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
    >
      <option value={0}>All Events</option>
      {events.map(event => (
        <option key={event.event_id} value={event.event_id}>{event.event_name}</option>
      ))}
    </select>
  );
}
`

UploadResultModal.tsx
`
import { AnimatePresence, motion } from 'framer-motion';
import { XMarkIcon } from '@heroicons/react/24/outline';

type Result = {
  inserted: number;
  skipped?: number;
  skip_details?: { reason: string }[];
};

type Props = {
  result: Result | null;
  isOpen: boolean;
  onClose: () => void;
};

export function UploadResultModal({ result, isOpen, onClose }: Props) {
  if (!result) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-25 p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
            exit={{ scale: 0.95 }}
            className="bg-white rounded-lg max-w-md w-full max-h-[70vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center p-4 border-b">
              <h3 className="text-lg font-medium text-gray-900">Upload Results</h3>
              <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
                <XMarkIcon className="w-6 h-6" />
              </button>
            </div>
            <div className="p-4 space-y-3">
              <p className="text-sm text-gray-600">Inserted: <strong>{result.inserted}</strong></p>
              {result.skipped !== undefined && (
                <p className="text-sm text-gray-600">Skipped: <strong>{result.skipped}</strong></p>
              )}
              {result.skip_details && result.skip_details.length > 0 && (
                <div className="mt-3">
                  <h4 className="font-medium text-gray-900 mb-1">Skip Details:</h4>
                  <ul className="text-xs text-gray-600 max-h-32 overflow-y-auto border rounded p-2 bg-gray-50">
                    {result.skip_details.map((detail, idx) => (
                      <li key={idx} className="py-1 border-b last:border-0">{detail.reason}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
`

TableContainer.tsx
`
type Props = {
  children: React.ReactNode;
  loading: boolean;
  data: any[];
  emptyMessage?: string;
  modulename: string;
};

export function TableContainer({ children, loading, data, emptyMessage = 'No records found.', modulename }: Props) {
  if (loading) {
    return (
      <tr>
        <td colSpan={6} className="px-6 py-12 text-center">
          <div className="flex flex-col items-center justify-center space-y-3">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p className="text-sm text-gray-500">Loading {modulename}...</p>
          </div>
        </td>
      </tr>
    );
  }

  if (data.length === 0) {
    return (
      <tr>
        <td colSpan={6} className="px-6 py-16 text-center">
          <div className="flex flex-col items-center justify-center space-y-2">
            <svg className="w-12 h-12 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <p className="text-sm font-normal text-gray-500">{emptyMessage}</p>
          </div>
        </td>
      </tr>
    );
  }

  return <>{children}</>;
}
`

Pagination.tsx
`
type Props = {
  page: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  disabled?: boolean;
};

export function Pagination({ page, totalPages, onPageChange, disabled }: Props) {
  return (
    <div className="flex space-x-2">
      <button
        onClick={() => onPageChange(Math.max(1, page - 1))}
        disabled={page === 1 || disabled}
        className="px-3 py-2 border border-gray-300 rounded-md disabled:opacity-50"
      >
        Previous
      </button>
      <span className="px-3 py-2 text-sm">{page} / {totalPages}</span>
      <button
        onClick={() => onPageChange(Math.min(totalPages, page + 1))}
        disabled={page === totalPages || disabled}
        className="px-3 py-2 border border-gray-300 rounded-md disabled:opacity-50"
      >
        Next
      </button>
    </div>
  );
}
`

FileActionsBar.tsx
`
import { useState, useRef, useCallback } from 'react';
import { 
  ArrowUpTrayIcon, 
  ArrowDownTrayIcon, 
  DocumentArrowDownIcon,
  ChevronUpIcon,
  ChevronDownIcon,
  XMarkIcon,
  TrashIcon
} from '@heroicons/react/24/outline';
import { api } from '../services/api';
import { toast } from 'react-hot-toast';
import { UploadResultModal } from './UploadResultModal';

type UploadResult = { inserted: number; skipped?: number; skip_details?: any[] };
type FilePreview = { name: string; size: number } | null;

type Props = {
  uploadEndpoint: string;
  exportEndpoint: string;
  templateEndpoint: string;
  exportParams: Record<string, string>;
  uploadLabel?: string;
  templateLabel?: string;
  onUploadComplete?: () => void; // Refresh parent
  onBulkDelete?: (ids: number[]) => Promise<void>; // Optional bulk delete
};

export function FileActionsBar({ 
  uploadEndpoint, 
  exportEndpoint, 
  templateEndpoint, 
  exportParams, 
  uploadLabel = "Upload Excel", 
  templateLabel = "Download Template",
    onUploadComplete,
  onBulkDelete
}: Props) {
  const [isOpen, setIsOpen] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [filePreview, setFilePreview] = useState<FilePreview>(null);
  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());
  const fileInputRef = useRef<HTMLInputElement>(null);
  const abortController = useRef<AbortController | null>(null);

  // === Drag & Drop ===
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    const file = e.dataTransfer.files[0];
    if (file && /\.(xlsx|xls)$/i.test(file.name)) {
      setFilePreview({ name: file.name, size: file.size });
      handleUpload(file);
    } else {
      toast.error('Invalid file. Only .xlsx or .xls allowed.');
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFilePreview({ name: file.name, size: file.size });
      handleUpload(file);
    }
  };

  // === Upload with Progress ===
  const handleUpload = async (file: File) => {
    setUploading(true);
    setUploadProgress(0);
    abortController.current = new AbortController();

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await api.post(uploadEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        signal: abortController.current.signal,
        onUploadProgress: (progressEvent) => {
          const percent = progressEvent.total 
            ? Math.round((progressEvent.loaded * 100) / progressEvent.total)
            : 0;
          setUploadProgress(percent);
        }
      });
      setUploadResult(res.data);
      setShowModal(true);
      toast.success('Upload complete');
      onUploadComplete?.();
    } catch (err: any) {
      if (err.name === 'AbortError') {
        toast.error('Upload cancelled');
      } else {
        toast.error(err.response?.data?.error || 'Upload failed');
      }
    } finally {
      setUploading(false);
      setUploadProgress(0);
      setFilePreview(null);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const cancelUpload = () => {
    abortController.current?.abort();
    setFilePreview(null);
    setUploading(false);
    setUploadProgress(0);
  };

  // === Export ===
  const handleExport = async () => {
    try {
      const query = new URLSearchParams(exportParams).toString();
      const res = await api.get(`${exportEndpoint}?${query}`, { responseType: 'blob' });
      const url = window.URL.createObjectURL(new Blob([res.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `export-${new Date().toISOString().split('T')[0]}.xlsx`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      toast.success('Exported');
    } catch {
      toast.error('Export failed');
    }
  };

  // === Template ===
  const handleTemplate = async () => {
    try {
      const res = await api.get(templateEndpoint, { responseType: 'blob' });
      const url = window.URL.createObjectURL(new Blob([res.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'template.xlsx');
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      toast.success('Template downloaded');
    } catch {
      toast.error('Download failed');
    }
  };

  // === Bulk Delete (if provided) ===
  const handleBulkDelete = async () => {
    if (selectedRows.size === 0) return toast.error('No rows selected');
    if (!onBulkDelete) return;

    if (!confirm(`Delete ${selectedRows.size} record(s)?`)) return;

    try {
      await onBulkDelete(Array.from(selectedRows));
      toast.success('Deleted');
      setSelectedRows(new Set());
    } catch {
      toast.error('Delete failed');
    }
  };

  return (
    <>
      {/* Collapsible Card */}
      <div className="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-gray-200/50 p-4 mb-6 transition-all duration-300">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="w-full flex items-center justify-between text-left group"
          aria-expanded={isOpen}
        >
          <h2 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
            <ArrowUpTrayIcon className="w-5 h-5 text-blue-600" />
            File Actions
          </h2>
          <div className="transition-transform duration-200 group-hover:scale-110">
            {isOpen ? <ChevronUpIcon className="w-5 h-5" /> : <ChevronDownIcon className="w-5 h-5" />}
          </div>
        </button>

        {isOpen && (
          <div className="mt-5 space-y-5 animate-in fade-in slide-in-from-top-2 duration-300">
            {/* Upload Zone */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">{uploadLabel}</label>
              <div
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                className={`
                  relative border-2 border-dashed rounded-xl p-8 text-center transition-all duration-200
                  ${isDragging ? 'border-blue-500 bg-blue-50/50 shadow-inner' : 'border-gray-300 hover:border-gray-400'}
                  ${uploading ? 'opacity-60' : ''}
                `}
              >
                <ArrowUpTrayIcon className="mx-auto h-12 w-12 text-gray-400" />
                <p className="mt-2 text-sm text-gray-600">
                  {isDragging ? 'Drop to upload' : 'Drag & drop or click'}
                </p>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={handleFileSelect}
                  disabled={uploading}
                  className="absolute inset-0 opacity-0 cursor-pointer"
                  aria-label="Upload file"
                />
              </div>

              {/* File Preview + Progress */}
              {filePreview && (
                <div className="mt-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
                  <div className="flex items-center justify-between text-sm">
                    <div className="flex-1 min-w-0">
                      <p className="font-medium text-gray-900 truncate">{filePreview.name}</p>
                      <p className="text-xs text-gray-500">{(filePreview.size / 1024).toFixed(1)} KB</p>
                    </div>
                    <button
                      onClick={cancelUpload}
                      className="text-red-500 hover:text-red-700"
                      aria-label="Cancel upload"
                    >
                      <XMarkIcon className="w-5 h-5" />
                    </button>
                  </div>
                  {uploading && (
                    <div className="mt-2">
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${uploadProgress}%` }}
                        />
                      </div>
                      <p className="text-xs text-right text-gray-600 mt-1">{uploadProgress}%</p>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Action Buttons */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <button
                onClick={handleExport}
                className="flex items-center justify-center px-4 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all"
              >
                <ArrowDownTrayIcon className="w-5 h-5 mr-2" />
                Export to Excel
              </button>
              <button
                onClick={handleTemplate}
                className="flex items-center justify-center px-4 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all"
              >
                <DocumentArrowDownIcon className="w-5 h-5 mr-2" />
                {templateLabel}
              </button>
            </div>

            {/* Bulk Delete (if enabled) */}
            {onBulkDelete && selectedRows.size > 0 && (
              <div className="flex items-center justify-end gap-2 pt-2 border-t">
                <span className="text-sm text-gray-600">{selectedRows.size} selected</span>
                <button
                  onClick={handleBulkDelete}
                  className="flex items-center gap-1 px-3 py-1.5 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                >
                  <TrashIcon className="w-4 h-4" />
                  Delete
                </button>
              </div>
            )}
          </div>
        )}
      </div>

      <UploadResultModal 
        result={uploadResult} 
        isOpen={showModal} 
        onClose={() => setShowModal(false)} 
      />
    </>
  );
}
`